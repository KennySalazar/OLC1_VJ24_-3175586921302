package analisis;

// Importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;

// Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVariable;
import instrucciones.Casteo;
import instrucciones.IncrementoDecremento;
import instrucciones.If;
import instrucciones.Match;
import instrucciones.Caso;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVector;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.Append;
import instrucciones.Remove;
import instrucciones.DeclaracionLista;
import instrucciones.Return;
import instrucciones.Funcion;


// Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVariable;
import expresiones.AccesoVector;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;


// Parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

// Terminales
terminal String CADENA, ENTERO, DECIMAL, CARACTER, BOOLEANO, ID, INCREMENTO, DECREMENTO;
terminal FINCADENA, PRINTLN, STRING, DOUBLE, INT, VAR, CONST, CHAR, BOOL;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULTIPLICACION, DIVISION, POTENCIA, MODULO;
terminal COMPARACIONIGUALIGUAL, NEGACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
terminal IGUAL, DOSPUNTOS;
terminal OR, AND, XOR, NOT;
terminal LLAVEA, LLAVEC, IF, ELSE;
terminal MATCH, SIGNOCASOMATCH, SIGNODEFAULTMATCH;
terminal FOR, WHILE, DO;
terminal String BREAK, CONTINUE;
terminal CAS;
terminal COMA, CORCHETEA, CORCHETEC;
terminal VOID, START_WITH;
terminal LISTA, NEW, APPEND, REMOVE, PUNTO;
terminal RETURN;
terminal ROUND, LENGTH, TOSTRING, FIND;




// No Terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION, INCREMENTOA, DECREMENTOA;
nonterminal Instruccion SIF, SMATCH;
nonterminal Instruccion CFOR, ACTUALIZA_FOR, CWHILE, CDOWHILE, BREAKK, CONTINUEA;
nonterminal LinkedList<Caso> CASOS;
nonterminal Caso CASO, DEFAULTCASO;
nonterminal Instruccion DECLARACION_VECTOR;
nonterminal LinkedList<Instruccion> LISTAVALORESUNI; 
nonterminal LinkedList<LinkedList<Instruccion>> LISTAVALORESBI; 
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion ASIGNAR_MODIFICAR_VECTOR;
nonterminal Instruccion METODO, FUNCION;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion RUN;
nonterminal LinkedList<Instruccion> PARAMSLLAMADA;
nonterminal Instruccion DECLARACION_LISTA, ANADIR, ELIMINAR;
nonterminal Instruccion LLAMADA, LLAMADA_EXP;
nonterminal Instruccion RETORNO_VALOR;


precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left COMPARACIONIGUALIGUAL, NEGACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence nonassoc POTENCIA;
precedence right UMENOS;
precedence right CAS;


start with INICIO;

INICIO ::= INSTRUCCIONES:a {: RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a             {:   RESULT=a; :}
              | DECLARACION:a           {:   RESULT=a;   :}
              | ASIGNACION:a            {:   RESULT=a;   :}
              | DECREMENTOA:a           {:   RESULT=a;   :}
              | INCREMENTOA:a           {:   RESULT=a;   :}
              | SIF:a                   {:   RESULT=a;   :}
              | SMATCH:a                {:   RESULT=a;   :}
              | CFOR:a                  {:   RESULT=a;   :}
              | CWHILE:a                {:   RESULT=a;   :}
              | CDOWHILE:a              {:   RESULT=a;   :}
              | BREAKK:a                {:   RESULT=a;   :}
              | CONTINUEA:a             {:   RESULT=a;   :}
              | DECLARACION_VECTOR:a    {:   RESULT=a;   :}
              | ASIGNAR_MODIFICAR_VECTOR :a    {:   RESULT=a;   :}
              | METODO:a                {:   RESULT=a;   :}
              | RUN:a                   {:   RESULT=a;   :}
              | DECLARACION_LISTA:a                   {:   RESULT=a;   :}
              | ANADIR:a                   {:   RESULT=a;   :}
              | ELIMINAR:a                   {:   RESULT=a;   :}
              | LLAMADA:a           {:   RESULT=a;   :}
              | RETORNO_VALOR:a           {:   RESULT=a;   :}
              | FUNCION:a           {:   RESULT=a;   :}
              | error FINCADENA
              | error
;

IMPRESION ::= PRINTLN PAR1 EXPRESION:a PAR2 FINCADENA {: RESULT = new Print(a, aleft, aright); :}
;

DECLARACION ::=   VAR ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA {: RESULT = new Declaracion(b, c, a, true, aleft, aright); :}
                | VAR ID:b DOSPUNTOS TIPOS:a FINCADENA {: RESULT = new Declaracion(b, a, true, aleft, aright); :}
                | CONST ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA {: RESULT = new Declaracion(b, c, a, false, aleft, aright); :}
                | CONST ID:b DOSPUNTOS TIPOS:a FINCADENA {: RESULT = new Declaracion(b, a, false, aleft, aright); :}
                
               
;


ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  {:   RESULT = new If(a, b, aleft, aright);   :}
    | IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  ELSE LLAVEA INSTRUCCIONES:c LLAVEC {:   RESULT = new If(a, b, c, aleft, aright);   :}
    | IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  ELSE SIF:c {:   RESULT = new If(a, b, c, aleft, aright);   :}
;

SMATCH ::=
    MATCH EXPRESION:a LLAVEA CASOS:b LLAVEC
        {: RESULT = new Match(a, b, aleft, aright); :}
    | MATCH EXPRESION:a LLAVEA CASOS:b DEFAULTCASO:c LLAVEC
        {: RESULT = new Match(a, b, c, aleft, aright); :}
    | MATCH EXPRESION:a LLAVEA DEFAULTCASO:c LLAVEC
        {: LinkedList<Caso> casos = new LinkedList<>();
           RESULT = new Match(a, casos, c, aleft, aright); :}
    ;

CASOS ::=
    CASOS:a CASO:b
        {: RESULT = a; RESULT.add(b); :}
    | CASO:a
        {: RESULT = new LinkedList<>(); RESULT.add(a); :}
    ;

CASO ::=
    EXPRESION:a SIGNOCASOMATCH LLAVEA INSTRUCCIONES:b LLAVEC
        {: RESULT = new Caso(a, b, false, aleft, aright); :}
    ;

DEFAULTCASO ::=
    SIGNODEFAULTMATCH LLAVEA INSTRUCCIONES:b LLAVEC
        {: RESULT = new Caso(null, b, true, bleft, bright); :}
    ;


CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVEA INSTRUCCIONES:d LLAVEC  {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :} 
                | ID:a INCREMENTO  {: RESULT = new IncrementoDecremento(a, true, aleft, aright); :} 
                | ID:a DECREMENTO  {: RESULT = new IncrementoDecremento(a, false, aleft, aright); :}
                
;

CWHILE ::= WHILE EXPRESION:a  LLAVEA INSTRUCCIONES:b LLAVEC {: RESULT = new While(a,b, aleft, aright); :}

;

CDOWHILE ::=  DO LLAVEA INSTRUCCIONES:a LLAVEC WHILE EXPRESION:b FINCADENA {: RESULT = new DoWhile(b,a,bleft, bright); :}

;

BREAKK ::=  BREAK:a FINCADENA {:RESULT = new Break(aleft, aright); :}

;

CONTINUEA ::= CONTINUE:a FINCADENA {:RESULT = new Continue(aleft, aright); :}

;


TIPOS ::= INT    {: RESULT = new Tipo(tipoDato.ENTERO); :}
        | DOUBLE {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        | STRING {: RESULT = new Tipo(tipoDato.CADENA); :}
        | CHAR {: RESULT = new Tipo(tipoDato.CARACTER); :}
        | BOOL {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
        
;

    

DECLARACION_VECTOR ::= VAR ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESUNI:c CORCHETEC FINCADENA 
                    {: RESULT = new DeclaracionVector(b, a, c, true, aleft, aright); :}
                    | CONST ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESUNI:c CORCHETEC FINCADENA 
                    {: RESULT = new DeclaracionVector(b, a, c, false, aleft, aright); :}
                    | VAR ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESBI:c CORCHETEC FINCADENA 
                    {: RESULT = new DeclaracionVector(b, a, c, true, aleft, aright, true); :}
                    | CONST ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESBI:c CORCHETEC FINCADENA 
                    {: RESULT = new DeclaracionVector(b, a, c, false, aleft, aright, true); :}
                    | VAR ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC FINCADENA 
                    {: RESULT = new Declaracion(b, a, true, aleft, aright); :}
                    | CONST ID:b DOSPUNTOS TIPOS:a CORCHETEA CORCHETEC FINCADENA 
                    {: RESULT = new Declaracion(b, a, false, aleft, aright); :}
;

LISTAVALORESUNI ::= LISTAVALORESUNI:a COMA EXPRESION:b 
                    {: RESULT = a; RESULT.add(b); :}
               | EXPRESION:a                 
                    {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

LISTAVALORESBI ::= LISTAVALORESBI:a COMA CORCHETEA LISTAVALORESUNI:b CORCHETEC 
                    {: RESULT = a; RESULT.add(b); :}
                | CORCHETEA LISTAVALORESUNI:a CORCHETEC                 
                    {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

ASIGNAR_MODIFICAR_VECTOR ::= ID:a CORCHETEA EXPRESION:i CORCHETEC IGUAL EXPRESION:c FINCADENA 
                            {: RESULT = new AsignacionVector(a, i, c, aleft, aright); :}
                            | ID:a CORCHETEA EXPRESION:i CORCHETEC CORCHETEA EXPRESION:i2 CORCHETEC IGUAL EXPRESION:c FINCADENA
                            {: RESULT = new AsignacionVector(a, i, i2, c, aleft, aright); :}
;

DECLARACION_LISTA ::=  LISTA MENORQUE TIPOS:a MAYORQUE ID:b  IGUAL NEW LISTA PAR1 PAR2 FINCADENA {: RESULT = new DeclaracionLista(b, a, bleft, bright); :}

;

ANADIR ::= ID:b PUNTO APPEND PAR1 EXPRESION:a PAR2 FINCADENA {: RESULT = new Append(b, a, aleft, aright); :}

;

ELIMINAR ::= ID:b PUNTO REMOVE PAR1 EXPRESION:a PAR2 FINCADENA {: RESULT = new Remove(b, a, aleft, aright); :}

;

METODO ::= VOID ID:b PAR1 PARAMS:p PAR2 LLAVEA INSTRUCCIONES:c LLAVEC    {:   RESULT= new Metodo(b, p, c, new Tipo(tipoDato.VOID) , bleft, bright );   :}
        |  VOID ID:b PAR1 PAR2 LLAVEA INSTRUCCIONES:c LLAVEC             {:   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID) , bleft, bright );   :}
;

FUNCION ::= TIPOS:a ID:b PAR1 PARAMS:p PAR2 LLAVEA INSTRUCCIONES:c LLAVEC    {:   RESULT= new Funcion(b, p, c, a, aleft, aright );   :}
        |  TIPOS:a ID:b PAR1 PAR2 LLAVEA INSTRUCCIONES:c LLAVEC             {:   RESULT= new Funcion(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
;



RETORNO_VALOR ::=  RETURN EXPRESION:a FINCADENA  {: RESULT =  new Return(a, aleft, aright); :}
                  |  RETURN:a FINCADENA           {: RESULT =  new Return(aleft, aright); :}
;

PARAMS ::= PARAMS:a COMA TIPOS:b ID:c   {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        :}
        | TIPOS:a ID:b                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        :}
;

RUN ::=  START_WITH ID:a PAR1 PARAMSLLAMADA:b PAR2 FINCADENA       {:   RESULT = new StartWith(a, b, aleft, aright );   :}
            | START_WITH ID:a PAR1 PAR2 FINCADENA                  {:   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   :}
;

LLAMADA ::= ID:a PAR1 PARAMSLLAMADA:b PAR2 FINCADENA               {:  RESULT= new Llamada(a, b, aleft, aright);    :}
          | ID:a PAR1 PAR2 FINCADENA                            {:  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    :}    
;

LLAMADA_EXP ::= ID:a PAR1 PARAMSLLAMADA:b PAR2              {:  RESULT= new Llamada(a, b, aleft, aright);    :}
                | ID:a PAR1 PAR2                            {:  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    :}

;

PARAMSLLAMADA ::= PARAMSLLAMADA:a COMA EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | EXPRESION:a                       {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                :}
;

EXPRESION ::= MENOS EXPRESION:a          {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | PAR1 TIPOS:b PAR2 EXPRESION:a  {: RESULT = new Casteo(a, b, aleft, aright); :} %prec CAS
            | EXPRESION:a MAS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIVISION EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a POTENCIA EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a MODULO EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a COMPARACIONIGUALIGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); :}
            | EXPRESION:a NEGACION EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); :}
            | EXPRESION:a MENORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); :}
            | EXPRESION:a MENORIGUALQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); :}
            | EXPRESION:a MAYORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); :}
            | EXPRESION:a MAYORIGUALQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); :}
            | NOT EXPRESION:a {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            | EXPRESION:a XOR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :}
            | ENTERO:a {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright ); :}
            | DECIMAL:a {: RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright ); :}
            | CADENA:a {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright ); :}
            | CARACTER:a {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright ); :}
            | BOOLEANO:a {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright ); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :}
            | ID:a {: RESULT = new AccesoVariable(a, aleft, aright); :}
            | ID:a CORCHETEA EXPRESION:b CORCHETEC {: RESULT = new AccesoVector(a, b,  aleft, aright); :}
            | ID:a CORCHETEA EXPRESION:b CORCHETEC CORCHETEA EXPRESION:c CORCHETEC  {: RESULT = new AccesoVector(a, b, c,  aleft, aright); :}
            | LLAMADA_EXP:a {: RESULT = a; :}
            | ROUND PAR1 EXPRESION:a PAR2 {: RESULT = new Round(a, aleft, aright); :}
            | LENGTH PAR1 EXPRESION:a PAR2 {: RESULT = new Length(a, aleft, aright); :}
            | TOSTRING PAR1 EXPRESION:a PAR2 {: RESULT = new ToString(a, aleft, aright); :}
            | ID:b PUNTO FIND PAR1 EXPRESION:a PAR2 {: RESULT = new Find(b, a, aleft, aright); :}
;


INCREMENTOA ::= ID:a INCREMENTO FINCADENA {: RESULT = new IncrementoDecremento(a, true, aleft, aright); :}

;

DECREMENTOA ::=  ID:a DECREMENTO FINCADENA {: RESULT = new IncrementoDecremento(a, false, aleft, aright); :}

;


