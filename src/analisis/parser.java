
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVariable;
import instrucciones.Casteo;
import instrucciones.IncrementoDecremento;
import instrucciones.If;
import instrucciones.Match;
import instrucciones.Caso;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVariable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\006\011\000\002\006\007\000" +
    "\002\006\011\000\002\006\007\000\002\007\006\000\002" +
    "\012\011\000\002\012\015\000\002\012\013\000\002\013" +
    "\007\000\002\013\010\000\002\013\007\000\002\022\004" +
    "\000\002\022\003\000\002\023\007\000\002\024\006\000" +
    "\002\014\014\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\016\007\000\002\017\011\000\002\020" +
    "\004\000\002\021\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\004\000\002\026\006\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\003\000\002\010\005\000" +
    "\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\052\003\026\004\027\005\010\006\025\007" +
    "\022\010\041\011\024\015\013\021\046\022\005\025\004" +
    "\030\030\051\020\054\023\056\016\061\014\062\035\063" +
    "\047\064\031\065\011\001\002\000\036\004\027\005\010" +
    "\006\025\007\022\010\041\011\055\016\121\017\120\020" +
    "\125\023\124\024\123\025\004\030\030\051\020\001\002" +
    "\000\004\011\234\001\002\000\056\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\015\ufff6" +
    "\021\ufff6\022\ufff6\025\ufff6\030\ufff6\051\ufff6\053\ufff6\054" +
    "\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\001\002\000\056\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\015\ufff2\021\ufff2\022\ufff2" +
    "\025\ufff2\030\ufff2\051\ufff2\053\ufff2\054\ufff2\056\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\001\002\000\122" +
    "\002\uffbf\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\014\uffbf\015\uffbf\021\uffbf\022\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\001\002\000\004\014\233\001\002\000\056\002" +
    "\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\015\ufffe\021\ufffe\022\ufffe\025\ufffe\030\ufffe\051" +
    "\ufffe\053\ufffe\054\ufffe\056\ufffe\061\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\001\002\000\004\025\227\001\002\000" +
    "\004\025\210\001\002\000\054\002\000\003\026\004\027" +
    "\005\010\006\025\007\022\010\041\011\024\015\013\021" +
    "\046\022\005\025\004\030\030\051\020\054\023\056\016" +
    "\061\014\062\035\063\047\064\031\065\011\001\002\000" +
    "\024\004\027\005\010\006\025\007\022\010\041\011\055" +
    "\025\004\030\030\051\020\001\002\000\056\002\ufff1\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\015\ufff1\021\ufff1\022\ufff1\025\ufff1\030\ufff1\051\ufff1\053" +
    "\ufff1\054\ufff1\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\001\002\000\024\004\027\005\010\006\025\007" +
    "\022\010\041\011\055\025\004\030\030\051\020\001\002" +
    "\000\056\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\015\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\030\ufff4\051\ufff4\053\ufff4\054\ufff4\056\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\001\002\000\122\002\uffbc" +
    "\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\014\uffbc\015\uffbc\021\uffbc\022\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\056" +
    "\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\004\025\151\001\002\000\120\002\uffb9\003" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\144\013\142\015\uffb9\021\uffb9\022\uffb9\025\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\143\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\056\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000" +
    "\122\002\uffbe\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\014\uffbe\015\uffbe\021\uffbe\022\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\001\002\000\060\002\uffef\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\014\141\015" +
    "\uffef\021\uffef\022\uffef\025\uffef\030\uffef\051\uffef\053\uffef" +
    "\054\uffef\056\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\001\002\000\122\002\uffbd\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\021" +
    "\uffbd\022\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\056\uffbd\057\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\024\004\027" +
    "\005\010\006\025\007\022\010\041\011\055\025\004\030" +
    "\030\051\020\001\002\000\004\014\137\001\002\000\056" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\015\ufffb\021\ufffb\022\ufffb\025\ufffb\030\ufffb" +
    "\051\ufffb\053\ufffb\054\ufffb\056\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\001\002\000\056\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\015" +
    "\ufffc\021\ufffc\022\ufffc\025\ufffc\030\ufffc\051\ufffc\053\ufffc" +
    "\054\ufffc\056\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\001\002\000\056\002\ufff5\003\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\015\ufff5\021\ufff5\022" +
    "\ufff5\025\ufff5\030\ufff5\051\ufff5\053\ufff5\054\ufff5\056\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\001\002\000" +
    "\024\004\027\005\010\006\025\007\022\010\041\011\055" +
    "\025\004\030\030\051\020\001\002\000\056\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\015\ufffd\021\ufffd\022\ufffd\025\ufffd\030\ufffd\051\ufffd\053" +
    "\ufffd\054\ufffd\056\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\001\002\000\056\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\015\ufff7\021\ufff7" +
    "\022\ufff7\025\ufff7\030\ufff7\051\ufff7\053\ufff7\054\ufff7\056" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002" +
    "\000\056\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\015\ufffa\021\ufffa\022\ufffa\025\ufffa" +
    "\030\ufffa\051\ufffa\053\ufffa\054\ufffa\056\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\001\002\000\122\002\uffbb" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\014\uffbb\015\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\056" +
    "\uffbb\057\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\001\002\000\004\002\132\001\002\000\056\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\015\ufff9\021\ufff9\022\ufff9\025\ufff9\030\ufff9\051\ufff9\053" +
    "\ufff9\054\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\001\002\000\112\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015\ufff8\021\ufff8" +
    "\022\ufff8\025\ufff8\027\070\030\062\032\066\033\074\034" +
    "\063\035\073\036\060\037\076\040\065\041\071\042\067" +
    "\043\064\046\075\047\057\050\061\051\ufff8\053\ufff8\054" +
    "\ufff8\056\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\021\ufff3\022\ufff3" +
    "\025\ufff3\030\ufff3\051\ufff3\053\ufff3\054\ufff3\056\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\001\002\000\004" +
    "\011\116\001\002\000\004\052\050\001\002\000\052\003" +
    "\026\004\027\005\010\006\025\007\022\010\041\011\024" +
    "\015\013\021\046\022\005\025\004\030\030\051\020\054" +
    "\023\056\016\061\014\062\035\063\047\064\031\065\011" +
    "\001\002\000\054\003\026\004\027\005\010\006\025\007" +
    "\022\010\041\011\024\015\013\021\046\022\005\025\004" +
    "\030\030\051\020\053\053\054\023\056\016\061\014\062" +
    "\035\063\047\064\031\065\011\001\002\000\056\002\uffff" +
    "\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\015\uffff\021\uffff\022\uffff\025\uffff\030\uffff\051\uffff" +
    "\053\uffff\054\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\001\002\000\004\062\054\001\002\000\024" +
    "\004\027\005\010\006\025\007\022\010\041\011\055\025" +
    "\004\030\030\051\020\001\002\000\122\002\uffb9\003\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\014" +
    "\uffb9\015\uffb9\021\uffb9\022\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\056\uffb9\057" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002" +
    "\000\042\014\072\027\070\030\062\032\066\033\074\034" +
    "\063\035\073\036\060\037\076\040\065\041\071\042\067" +
    "\043\064\046\075\047\057\050\061\001\002\000\024\004" +
    "\027\005\010\006\025\007\022\010\041\011\055\025\004" +
    "\030\030\051\020\001\002\000\024\004\027\005\010\006" +
    "\025\007\022\010\041\011\055\025\004\030\030\051\020" +
    "\001\002\000\024\004\027\005\010\006\025\007\022\010" +
    "\041\011\055\025\004\030\030\051\020\001\002\000\024" +
    "\004\027\005\010\006\025\007\022\010\041\011\055\025" +
    "\004\030\030\051\020\001\002\000\024\004\027\005\010" +
    "\006\025\007\022\010\041\011\055\025\004\030\030\051" +
    "\020\001\002\000\024\004\027\005\010\006\025\007\022" +
    "\010\041\011\055\025\004\030\030\051\020\001\002\000" +
    "\024\004\027\005\010\006\025\007\022\010\041\011\055" +
    "\025\004\030\030\051\020\001\002\000\024\004\027\005" +
    "\010\006\025\007\022\010\041\011\055\025\004\030\030" +
    "\051\020\001\002\000\024\004\027\005\010\006\025\007" +
    "\022\010\041\011\055\025\004\030\030\051\020\001\002" +
    "\000\024\004\027\005\010\006\025\007\022\010\041\011" +
    "\055\025\004\030\030\051\020\001\002\000\024\004\027" +
    "\005\010\006\025\007\022\010\041\011\055\025\004\030" +
    "\030\051\020\001\002\000\056\002\uffd9\003\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\015\uffd9\021" +
    "\uffd9\022\uffd9\025\uffd9\030\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\001" +
    "\002\000\024\004\027\005\010\006\025\007\022\010\041" +
    "\011\055\025\004\030\030\051\020\001\002\000\024\004" +
    "\027\005\010\006\025\007\022\010\041\011\055\025\004" +
    "\030\030\051\020\001\002\000\024\004\027\005\010\006" +
    "\025\007\022\010\041\011\055\025\004\030\030\051\020" +
    "\001\002\000\024\004\027\005\010\006\025\007\022\010" +
    "\041\011\055\025\004\030\030\051\020\001\002\000\122" +
    "\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\014\uffc8\015\uffc8\021\uffc8\022\uffc8\025\uffc8" +
    "\026\uffc8\027\070\030\062\032\066\033\074\034\063\035" +
    "\073\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\001\002\000\122\002\uffc0\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\014\uffc0\015\uffc0" +
    "\021\uffc0\022\uffc0\025\uffc0\026\uffc0\027\070\030\062\032" +
    "\066\033\074\034\063\035\073\036\060\037\076\040\065" +
    "\041\071\042\067\043\064\046\uffc0\047\057\050\061\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\056\uffc0\057\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\122\002" +
    "\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\014\uffcc\015\uffcc\021\uffcc\022\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\034\063\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\056\uffcc\057\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\122\002\uffca\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\014\uffca\015\uffca\021" +
    "\uffca\022\uffca\025\uffca\026\uffca\027\uffca\030\uffca\032\uffca" +
    "\033\uffca\034\063\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\056\uffca\057\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\001\002\000\122\002\uffc6" +
    "\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\014\uffc6\015\uffc6\021\uffc6\022\uffc6\025\uffc6\026\uffc6" +
    "\027\070\030\062\032\066\033\074\034\063\035\073\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\056" +
    "\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\001\002\000\122\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\014\uffcf\015\uffcf\021\uffcf" +
    "\022\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\066\033" +
    "\074\034\063\035\073\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\001\002\000\122\002\uffc5\003" +
    "\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\015\uffc5\021\uffc5\022\uffc5\025\uffc5\026\uffc5\027" +
    "\070\030\062\032\066\033\074\034\063\035\073\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5" +
    "\057\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\122\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd\021\uffcd\022" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd" +
    "\034\063\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\001\002\000\122\002\uffc7\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\014" +
    "\uffc7\015\uffc7\021\uffc7\022\uffc7\025\uffc7\026\uffc7\027\070" +
    "\030\062\032\066\033\074\034\063\035\073\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7\057" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\001\002" +
    "\000\122\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\014\uffc4\015\uffc4\021\uffc4\022\uffc4" +
    "\025\uffc4\026\uffc4\027\070\030\062\032\066\033\074\034" +
    "\063\035\073\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\001\002\000\120\002\uffcb\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\014\uffcb" +
    "\015\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\056\uffcb\057\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\122\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\014\uffce\015\uffce\021\uffce\022\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\032\066\033\074\034\063\035\073" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\056\uffce\057\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\001\002\000\122\002\uffc2\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2\021" +
    "\uffc2\022\uffc2\025\uffc2\026\uffc2\027\070\030\062\032\066" +
    "\033\074\034\063\035\073\036\060\037\076\040\065\041" +
    "\071\042\067\043\064\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\056\uffc2\057\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\122\002\uffc9" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\014\uffc9\015\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9" +
    "\027\070\030\062\032\066\033\074\034\063\035\073\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056" +
    "\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\001\002\000\122\002\uffc1\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\015\uffc1\021\uffc1" +
    "\022\uffc1\025\uffc1\026\uffc1\027\070\030\062\032\066\033" +
    "\074\034\063\035\073\036\060\037\076\040\065\041\071" +
    "\042\067\043\064\046\uffc1\047\uffc1\050\061\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\001\002\000\004\045\117\001" +
    "\002\000\014\016\121\017\120\020\125\023\124\024\123" +
    "\001\002\000\010\014\uffd5\026\uffd5\044\uffd5\001\002\000" +
    "\010\014\uffd4\026\uffd4\044\uffd4\001\002\000\006\014\126" +
    "\044\127\001\002\000\010\014\uffd2\026\uffd2\044\uffd2\001" +
    "\002\000\010\014\uffd3\026\uffd3\044\uffd3\001\002\000\010" +
    "\014\uffd6\026\uffd6\044\uffd6\001\002\000\056\002\uffec\003" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\015\uffec\021\uffec\022\uffec\025\uffec\030\uffec\051\uffec\053" +
    "\uffec\054\uffec\056\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\001\002\000\024\004\027\005\010\006\025\007" +
    "\022\010\041\011\055\025\004\030\030\051\020\001\002" +
    "\000\042\014\131\027\070\030\062\032\066\033\074\034" +
    "\063\035\073\036\060\037\076\040\065\041\071\042\067" +
    "\043\064\046\075\047\057\050\061\001\002\000\056\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\015\uffed\021\uffed\022\uffed\025\uffed\030\uffed\051" +
    "\uffed\053\uffed\054\uffed\056\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\001\002\000\004\002\001\001\002\000" +
    "\042\027\070\030\062\032\066\033\074\034\063\035\073" +
    "\036\060\037\076\040\065\041\071\042\067\043\064\046" +
    "\075\047\057\050\061\052\134\001\002\000\052\003\026" +
    "\004\027\005\010\006\025\007\022\010\041\011\024\015" +
    "\013\021\046\022\005\025\004\030\030\051\020\054\023" +
    "\056\016\061\014\062\035\063\047\064\031\065\011\001" +
    "\002\000\054\003\026\004\027\005\010\006\025\007\022" +
    "\010\041\011\024\015\013\021\046\022\005\025\004\030" +
    "\030\051\020\053\136\054\023\056\016\061\014\062\035" +
    "\063\047\064\031\065\011\001\002\000\056\002\uffda\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\015\uffda\021\uffda\022\uffda\025\uffda\030\uffda\051\uffda\053" +
    "\uffda\054\uffda\056\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\001\002\000\056\002\uffd8\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\015\uffd8\021\uffd8" +
    "\022\uffd8\025\uffd8\030\uffd8\051\uffd8\053\uffd8\054\uffd8\056" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\001\002" +
    "\000\122\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\014\uffd1\015\uffd1\021\uffd1\022\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\001\002\000\056\002\ufff0\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\015\ufff0" +
    "\021\ufff0\022\ufff0\025\ufff0\030\ufff0\051\ufff0\053\ufff0\054" +
    "\ufff0\056\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\001\002\000\004\014\150\001\002\000\024\004\027\005" +
    "\010\006\025\007\022\010\041\011\055\025\004\030\030" +
    "\051\020\001\002\000\004\014\145\001\002\000\056\002" +
    "\uffb8\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\015\uffb8\021\uffb8\022\uffb8\025\uffb8\030\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\001\002\000\042\014\147\027\070\030" +
    "\062\032\066\033\074\034\063\035\073\036\060\037\076" +
    "\040\065\041\071\042\067\043\064\046\075\047\057\050" +
    "\061\001\002\000\056\002\uffe9\003\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\015\uffe9\021\uffe9\022" +
    "\uffe9\025\uffe9\030\uffe9\051\uffe9\053\uffe9\054\uffe9\056\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\001\002\000" +
    "\056\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\015\uffb7\021\uffb7\022\uffb7\025\uffb7\030" +
    "\uffb7\051\uffb7\053\uffb7\054\uffb7\056\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\001\002\000\024\004\027\005" +
    "\010\006\025\007\022\010\041\011\055\025\004\030\030" +
    "\051\020\001\002\000\042\026\153\027\070\030\062\032" +
    "\066\033\074\034\063\035\073\036\060\037\076\040\065" +
    "\041\071\042\067\043\064\046\075\047\057\050\061\001" +
    "\002\000\004\052\154\001\002\000\052\003\026\004\027" +
    "\005\010\006\025\007\022\010\041\011\024\015\013\021" +
    "\046\022\005\025\004\030\030\051\020\054\023\056\016" +
    "\061\014\062\035\063\047\064\031\065\011\001\002\000" +
    "\054\003\026\004\027\005\010\006\025\007\022\010\041" +
    "\011\024\015\013\021\046\022\005\025\004\030\030\051" +
    "\020\053\156\054\023\056\016\061\014\062\035\063\047" +
    "\064\031\065\011\001\002\000\060\002\uffe8\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\015\uffe8" +
    "\021\uffe8\022\uffe8\025\uffe8\030\uffe8\051\uffe8\053\uffe8\054" +
    "\uffe8\055\157\056\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\006\052\160\054\023\001\002\000" +
    "\052\003\026\004\027\005\010\006\025\007\022\010\041" +
    "\011\024\015\013\021\046\022\005\025\004\030\030\051" +
    "\020\054\023\056\016\061\014\062\035\063\047\064\031" +
    "\065\011\001\002\000\056\002\uffe6\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\015\uffe6\021\uffe6" +
    "\022\uffe6\025\uffe6\030\uffe6\051\uffe6\053\uffe6\054\uffe6\056" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\001\002" +
    "\000\054\003\026\004\027\005\010\006\025\007\022\010" +
    "\041\011\024\015\013\021\046\022\005\025\004\030\030" +
    "\051\020\053\163\054\023\056\016\061\014\062\035\063" +
    "\047\064\031\065\011\001\002\000\056\002\uffe7\003\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\015" +
    "\uffe7\021\uffe7\022\uffe7\025\uffe7\030\uffe7\051\uffe7\053\uffe7" +
    "\054\uffe7\056\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\001\002\000\122\002\uffc3\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3\021" +
    "\uffc3\022\uffc3\025\uffc3\026\uffc3\027\070\030\062\032\066" +
    "\033\074\034\063\035\073\036\060\037\076\040\065\041" +
    "\071\042\067\043\064\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\042\027\070" +
    "\030\062\032\066\033\074\034\063\035\073\036\060\037" +
    "\076\040\065\041\071\042\067\043\064\046\075\047\057" +
    "\050\061\052\166\001\002\000\026\004\027\005\010\006" +
    "\025\007\022\010\041\011\055\025\004\030\030\051\020" +
    "\060\171\001\002\000\030\004\027\005\010\006\025\007" +
    "\022\010\041\011\055\025\004\030\030\051\020\053\206" +
    "\060\171\001\002\000\030\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\025\uffe1\030\uffe1\051\uffe1\053\uffe1" +
    "\060\uffe1\001\002\000\004\052\201\001\002\000\004\053" +
    "\200\001\002\000\042\027\070\030\062\032\066\033\074" +
    "\034\063\035\073\036\060\037\076\040\065\041\071\042" +
    "\067\043\064\046\075\047\057\050\061\057\174\001\002" +
    "\000\004\052\175\001\002\000\052\003\026\004\027\005" +
    "\010\006\025\007\022\010\041\011\024\015\013\021\046" +
    "\022\005\025\004\030\030\051\020\054\023\056\016\061" +
    "\014\062\035\063\047\064\031\065\011\001\002\000\054" +
    "\003\026\004\027\005\010\006\025\007\022\010\041\011" +
    "\024\015\013\021\046\022\005\025\004\030\030\051\020" +
    "\053\177\054\023\056\016\061\014\062\035\063\047\064" +
    "\031\065\011\001\002\000\030\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\025\uffe0\030\uffe0\051\uffe0\053" +
    "\uffe0\060\uffe0\001\002\000\056\002\uffe3\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\015\uffe3\021" +
    "\uffe3\022\uffe3\025\uffe3\030\uffe3\051\uffe3\053\uffe3\054\uffe3" +
    "\056\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\001" +
    "\002\000\052\003\026\004\027\005\010\006\025\007\022" +
    "\010\041\011\024\015\013\021\046\022\005\025\004\030" +
    "\030\051\020\054\023\056\016\061\014\062\035\063\047" +
    "\064\031\065\011\001\002\000\054\003\026\004\027\005" +
    "\010\006\025\007\022\010\041\011\024\015\013\021\046" +
    "\022\005\025\004\030\030\051\020\053\203\054\023\056" +
    "\016\061\014\062\035\063\047\064\031\065\011\001\002" +
    "\000\004\053\uffdf\001\002\000\030\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\025\uffe2\030\uffe2\051\uffe2" +
    "\053\uffe2\060\uffe2\001\002\000\004\053\207\001\002\000" +
    "\056\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\015\uffe5\021\uffe5\022\uffe5\025\uffe5\030" +
    "\uffe5\051\uffe5\053\uffe5\054\uffe5\056\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\001\002\000\056\002\uffe4\003" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\015\uffe4\021\uffe4\022\uffe4\025\uffe4\030\uffe4\051\uffe4\053" +
    "\uffe4\054\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\001\002\000\004\011\211\001\002\000\004\044" +
    "\143\001\002\000\024\004\027\005\010\006\025\007\022" +
    "\010\041\011\055\025\004\030\030\051\020\001\002\000" +
    "\042\014\214\027\070\030\062\032\066\033\074\034\063" +
    "\035\073\036\060\037\076\040\065\041\071\042\067\043" +
    "\064\046\075\047\057\050\061\001\002\000\004\011\215" +
    "\001\002\000\010\012\225\013\223\044\224\001\002\000" +
    "\004\026\217\001\002\000\004\052\220\001\002\000\052" +
    "\003\026\004\027\005\010\006\025\007\022\010\041\011" +
    "\024\015\013\021\046\022\005\025\004\030\030\051\020" +
    "\054\023\056\016\061\014\062\035\063\047\064\031\065" +
    "\011\001\002\000\054\003\026\004\027\005\010\006\025" +
    "\007\022\010\041\011\024\015\013\021\046\022\005\025" +
    "\004\030\030\051\020\053\222\054\023\056\016\061\014" +
    "\062\035\063\047\064\031\065\011\001\002\000\056\002" +
    "\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\015\uffde\021\uffde\022\uffde\025\uffde\030\uffde\051" +
    "\uffde\053\uffde\054\uffde\056\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\001\002\000\004\026\uffdb\001\002\000" +
    "\024\004\027\005\010\006\025\007\022\010\041\011\055" +
    "\025\004\030\030\051\020\001\002\000\004\026\uffdc\001" +
    "\002\000\042\026\uffdd\027\070\030\062\032\066\033\074" +
    "\034\063\035\073\036\060\037\076\040\065\041\071\042" +
    "\067\043\064\046\075\047\057\050\061\001\002\000\024" +
    "\004\027\005\010\006\025\007\022\010\041\011\055\025" +
    "\004\030\030\051\020\001\002\000\042\026\231\027\070" +
    "\030\062\032\066\033\074\034\063\035\073\036\060\037" +
    "\076\040\065\041\071\042\067\043\064\046\075\047\057" +
    "\050\061\001\002\000\004\014\232\001\002\000\056\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\015\uffee\021\uffee\022\uffee\025\uffee\030\uffee\051" +
    "\uffee\053\uffee\054\uffee\056\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\001\002\000\056\002\uffd7\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\015\uffd7" +
    "\021\uffd7\022\uffd7\025\uffd7\030\uffd7\051\uffd7\053\uffd7\054" +
    "\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\001\002\000\004\045\235\001\002\000\014\016\121\017" +
    "\120\020\125\023\124\024\123\001\002\000\006\014\237" +
    "\044\240\001\002\000\056\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\015\uffea\021\uffea" +
    "\022\uffea\025\uffea\030\uffea\051\uffea\053\uffea\054\uffea\056" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\001\002" +
    "\000\024\004\027\005\010\006\025\007\022\010\041\011" +
    "\055\025\004\030\030\051\020\001\002\000\042\014\242" +
    "\027\070\030\062\032\066\033\074\034\063\035\073\036" +
    "\060\037\076\040\065\041\071\042\067\043\064\046\075" +
    "\047\057\050\061\001\002\000\056\002\uffeb\003\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\015\uffeb" +
    "\021\uffeb\022\uffeb\025\uffeb\030\uffeb\051\uffeb\053\uffeb\054" +
    "\uffeb\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\001\002\000\042\026\247\027\070\030\062\032\066\033" +
    "\074\034\063\035\073\036\060\037\076\040\065\041\071" +
    "\042\067\043\064\046\075\047\057\050\061\001\002\000" +
    "\004\026\245\001\002\000\024\004\027\005\010\006\025" +
    "\007\022\010\041\011\055\025\004\030\030\051\020\001" +
    "\002\000\122\002\uffd0\003\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0\021\uffd0\022" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\001\002\000\122\002\uffba\003\uffba" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\014" +
    "\uffba\015\uffba\021\uffba\022\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\056\uffba\057" +
    "\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\042\002\041\003\014\004\011\005\035\006" +
    "\032\007\031\010\042\011\037\012\036\013\005\014\033" +
    "\016\020\017\044\020\006\021\016\026\043\001\001\000" +
    "\006\025\243\026\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\051\005\035\006\032\007\031\010\042\011" +
    "\037\012\036\013\005\014\033\016\020\017\044\020\006" +
    "\021\016\026\043\001\001\000\004\026\164\001\001\000" +
    "\002\001\001\000\004\026\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\050\004\011\005\035\006\032\007\031" +
    "\010\042\011\037\012\036\013\005\014\033\016\020\017" +
    "\044\020\006\021\016\026\043\001\001\000\036\004\051" +
    "\005\035\006\032\007\031\010\042\011\037\012\036\013" +
    "\005\014\033\016\020\017\044\020\006\021\016\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\114\001\001\000\004\026\113\001\001\000\004\026" +
    "\112\001\001\000\004\026\111\001\001\000\004\026\110" +
    "\001\001\000\004\026\107\001\001\000\004\026\106\001" +
    "\001\000\004\026\105\001\001\000\004\026\104\001\001" +
    "\000\004\026\103\001\001\000\004\026\102\001\001\000" +
    "\002\001\001\000\004\026\101\001\001\000\004\026\100" +
    "\001\001\000\004\026\077\001\001\000\004\026\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\134\004\011\005\035\006" +
    "\032\007\031\010\042\011\037\012\036\013\005\014\033" +
    "\016\020\017\044\020\006\021\016\026\043\001\001\000" +
    "\036\004\051\005\035\006\032\007\031\010\042\011\037" +
    "\012\036\013\005\014\033\016\020\017\044\020\006\021" +
    "\016\026\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\154\004\011\005\035\006\032\007\031\010" +
    "\042\011\037\012\036\013\005\014\033\016\020\017\044" +
    "\020\006\021\016\026\043\001\001\000\036\004\051\005" +
    "\035\006\032\007\031\010\042\011\037\012\036\013\005" +
    "\014\033\016\020\017\044\020\006\021\016\026\043\001" +
    "\001\000\002\001\001\000\004\012\160\001\001\000\040" +
    "\003\161\004\011\005\035\006\032\007\031\010\042\011" +
    "\037\012\036\013\005\014\033\016\020\017\044\020\006" +
    "\021\016\026\043\001\001\000\002\001\001\000\036\004" +
    "\051\005\035\006\032\007\031\010\042\011\037\012\036" +
    "\013\005\014\033\016\020\017\044\020\006\021\016\026" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\166\023\167\024\171\026\172\001" +
    "\001\000\010\023\203\024\204\026\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\175\004\011\005\035" +
    "\006\032\007\031\010\042\011\037\012\036\013\005\014" +
    "\033\016\020\017\044\020\006\021\016\026\043\001\001" +
    "\000\036\004\051\005\035\006\032\007\031\010\042\011" +
    "\037\012\036\013\005\014\033\016\020\017\044\020\006" +
    "\021\016\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\201\004\011\005\035\006\032\007\031" +
    "\010\042\011\037\012\036\013\005\014\033\016\020\017" +
    "\044\020\006\021\016\026\043\001\001\000\036\004\051" +
    "\005\035\006\032\007\031\010\042\011\037\012\036\013" +
    "\005\014\033\016\020\017\044\020\006\021\016\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\211" +
    "\001\001\000\002\001\001\000\004\026\212\001\001\000" +
    "\002\001\001\000\004\015\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\220\004" +
    "\011\005\035\006\032\007\031\010\042\011\037\012\036" +
    "\013\005\014\033\016\020\017\044\020\006\021\016\026" +
    "\043\001\001\000\036\004\051\005\035\006\032\007\031" +
    "\010\042\011\037\012\036\013\005\014\033\016\020\017" +
    "\044\020\006\021\016\026\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\245\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECREMENTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INCREMENTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CONTINUEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRESION ::= PRINTLN PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, c, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, c, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC ELSE LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SMATCH ::= MATCH EXPRESION LLAVEA CASOS LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SMATCH ::= MATCH EXPRESION LLAVEA CASOS DEFAULTCASO LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SMATCH ::= MATCH EXPRESION LLAVEA DEFAULTCASO LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Caso> casos = new LinkedList<>();
           RESULT = new Match(a, casos, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASO ::= EXPRESION SIGNOCASOMATCH LLAVEA INSTRUCCIONES LLAVEC 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFAULTCASO ::= SIGNODEFAULTMATCH LLAVEA INSTRUCCIONES LLAVEC 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(null, b, true, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULTCASO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTUALIZA_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncrementoDecremento(a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ACTUALIZA_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncrementoDecremento(a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CWHILE ::= WHILE EXPRESION LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CDOWHILE ::= DO LLAVEA INSTRUCCIONES LLAVEC WHILE EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(b,a,bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTINUEA ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION COMPARACIONIGUALIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION NEGACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION MENORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MAYORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVariable(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INCREMENTOA ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncrementoDecremento(a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECREMENTOA ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncrementoDecremento(a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTOA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
