
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVariable;
import instrucciones.Casteo;
import instrucciones.IncrementoDecremento;
import instrucciones.If;
import instrucciones.Match;
import instrucciones.Caso;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVector;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.Append;
import instrucciones.Remove;
import instrucciones.DeclaracionLista;
import instrucciones.Return;
import instrucciones.Funcion;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVariable;
import expresiones.AccesoVector;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\005\007\000\002\006" +
    "\011\000\002\006\007\000\002\006\011\000\002\006\007" +
    "\000\002\007\006\000\002\012\011\000\002\012\015\000" +
    "\002\012\013\000\002\013\007\000\002\013\010\000\002" +
    "\013\007\000\002\022\004\000\002\022\003\000\002\023" +
    "\007\000\002\024\006\000\002\014\014\000\002\015\005" +
    "\000\002\015\004\000\002\015\004\000\002\016\007\000" +
    "\002\017\011\000\002\020\004\000\002\021\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\025\015\000\002\025\015" +
    "\000\002\025\017\000\002\025\017\000\002\025\011\000" +
    "\002\025\011\000\002\026\005\000\002\026\003\000\002" +
    "\027\007\000\002\027\005\000\002\032\011\000\002\032" +
    "\014\000\002\040\015\000\002\041\011\000\002\042\010" +
    "\000\002\033\012\000\002\033\011\000\002\034\012\000" +
    "\002\034\011\000\002\045\005\000\002\045\004\000\002" +
    "\035\006\000\002\035\004\000\002\036\010\000\002\036" +
    "\007\000\002\043\007\000\002\043\006\000\002\044\006" +
    "\000\002\044\005\000\002\037\005\000\002\037\003\000" +
    "\002\031\004\000\002\031\006\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\004\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\031\006\000" +
    "\002\031\011\000\002\031\003\000\002\031\006\000\002" +
    "\031\006\000\002\031\006\000\002\031\010\000\002\031" +
    "\003\000\002\010\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\054\003\036\011\034\015\020\016\053\017" +
    "\014\020\016\021\060\022\007\023\006\024\031\054\032" +
    "\056\023\061\021\062\046\063\061\064\037\065\015\072" +
    "\040\073\045\074\033\101\035\001\002\000\060\002\ufff1" +
    "\003\ufff1\011\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\053\ufff1\054\ufff1\056\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\101\ufff1\001\002\000\004\011\u013d\001\002" +
    "\000\016\011\uffcb\014\uffcb\026\uffcb\042\uffcb\044\uffcb\070" +
    "\uffcb\001\002\000\004\011\u0127\001\002\000\060\002\ufff7" +
    "\003\ufff7\011\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\053\ufff7\054\ufff7\056\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\101\ufff7\001\002\000\060\002\ufff3\003\ufff3" +
    "\011\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\053\ufff3\054\ufff3\056\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\072\ufff3\073\ufff3\074" +
    "\ufff3\101\ufff3\001\002\000\060\002\uffe9\003\uffe9\011\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\053\uffe9\054\uffe9\056\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\072\uffe9\073\uffe9\074\uffe9\101" +
    "\uffe9\001\002\000\060\002\uffef\003\uffef\011\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\053\uffef\054\uffef\056\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\072\uffef\073\uffef\074\uffef\101\uffef\001" +
    "\002\000\016\011\uffcd\014\uffcd\026\uffcd\042\uffcd\044\uffcd" +
    "\070\uffcd\001\002\000\004\014\u0126\001\002\000\016\011" +
    "\uffce\014\uffce\026\uffce\042\uffce\044\uffce\070\uffce\001\002" +
    "\000\060\002\ufffe\003\ufffe\011\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\053\ufffe" +
    "\054\ufffe\056\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\101\ufffe\001\002\000\004" +
    "\025\u0122\001\002\000\004\025\u0113\001\002\000\056\002" +
    "\000\003\036\011\034\015\020\016\053\017\014\020\016" +
    "\021\060\022\007\023\006\024\031\054\032\056\023\061" +
    "\021\062\046\063\061\064\037\065\015\072\040\073\045" +
    "\074\033\101\035\001\002\000\032\004\070\005\077\006" +
    "\071\007\105\010\074\011\102\025\100\030\073\051\103" +
    "\102\101\103\072\104\067\001\002\000\060\002\ufff2\003" +
    "\ufff2\011\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\053\ufff2\054\ufff2\056\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\072\ufff2\073\ufff2" +
    "\074\ufff2\101\ufff2\001\002\000\060\002\uffec\003\uffec\011" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\053\uffec\054\uffec\056\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\072\uffec\073\uffec\074\uffec" +
    "\101\uffec\001\002\000\060\002\ufff0\003\ufff0\011\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\053\ufff0\054\ufff0\056\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\072\ufff0\073\ufff0\074\ufff0\101\ufff0" +
    "\001\002\000\060\002\ufff5\003\ufff5\011\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\053\ufff5\054\ufff5\056\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\072\ufff5\073\ufff5\074\ufff5\101\ufff5\001\002" +
    "\000\060\002\uffed\003\uffed\011\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\053\uffed" +
    "\054\uffed\056\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\072\uffed\073\uffed\074\uffed\101\uffed\001\002\000\016" +
    "\011\uffca\014\uffca\026\uffca\042\uffca\044\uffca\070\uffca\001" +
    "\002\000\004\025\365\001\002\000\004\040\353\001\002" +
    "\000\016\012\320\013\314\025\321\044\316\070\317\100" +
    "\315\001\002\000\034\004\070\005\077\006\071\007\105" +
    "\010\074\011\102\014\311\025\100\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\062\002\uffe7\003\uffe7" +
    "\011\uffe7\014\310\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\053\uffe7\054\uffe7\056\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\101\uffe7\001\002\000\004\014\307\001\002" +
    "\000\004\011\267\001\002\000\060\002\ufffb\003\ufffb\011" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\053\ufffb\054\ufffb\056\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\101\ufffb\001\002\000\060\002\ufffc\003\ufffc\011\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\053\ufffc\054\ufffc\056\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\072\ufffc\073\ufffc\074\ufffc\101\ufffc" +
    "\001\002\000\060\002\uffea\003\uffea\011\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\053\uffea\054\uffea\056\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\072\uffea\073\uffea\074\uffea\101\uffea\001\002" +
    "\000\060\002\ufff6\003\ufff6\011\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\053\ufff6" +
    "\054\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\101\ufff6\001\002\000\004" +
    "\011\260\001\002\000\032\004\070\005\077\006\071\007" +
    "\105\010\074\011\102\025\100\030\073\051\103\102\101" +
    "\103\072\104\067\001\002\000\060\002\ufffd\003\ufffd\011" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\053\ufffd\054\ufffd\056\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\101\ufffd\001\002\000\060\002\ufff8\003\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\053\ufff8\054\ufff8\056\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\072\ufff8\073\ufff8\074\ufff8\101\ufff8" +
    "\001\002\000\060\002\uffeb\003\uffeb\011\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\053\uffeb\054\uffeb\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\072\uffeb\073\uffeb\074\uffeb\101\uffeb\001\002" +
    "\000\060\002\ufffa\003\ufffa\011\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\053\ufffa" +
    "\054\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\101\ufffa\001\002\000\016" +
    "\011\uffcc\014\uffcc\026\uffcc\042\uffcc\044\uffcc\070\uffcc\001" +
    "\002\000\004\002\253\001\002\000\060\002\ufff9\003\ufff9" +
    "\011\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\053\ufff9\054\ufff9\056\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\101\ufff9\001\002\000\060\002\ufff4\003\ufff4\011\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\053\ufff4\054\ufff4\056\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\072\ufff4\073\ufff4\074\ufff4\101" +
    "\ufff4\001\002\000\060\002\uffee\003\uffee\011\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\053\uffee\054\uffee\056\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\072\uffee\073\uffee\074\uffee\101\uffee\001" +
    "\002\000\004\011\213\001\002\000\004\052\062\001\002" +
    "\000\054\003\036\011\034\015\020\016\053\017\014\020" +
    "\016\021\060\022\007\023\006\024\031\054\032\056\023" +
    "\061\021\062\046\063\061\064\037\065\015\072\040\073" +
    "\045\074\033\101\035\001\002\000\056\003\036\011\034" +
    "\015\020\016\053\017\014\020\016\021\060\022\007\023" +
    "\006\024\031\053\065\054\032\056\023\061\021\062\046" +
    "\063\061\064\037\065\015\072\040\073\045\074\033\101" +
    "\035\001\002\000\060\002\uffff\003\uffff\011\uffff\015\uffff" +
    "\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\053\uffff\054\uffff\056\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\072\uffff\073\uffff\074\uffff\101\uffff\001" +
    "\002\000\004\062\066\001\002\000\032\004\070\005\077" +
    "\006\071\007\105\010\074\011\102\025\100\030\073\051" +
    "\103\102\101\103\072\104\067\001\002\000\004\025\210" +
    "\001\002\000\054\014\uff96\026\uff96\027\uff96\030\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\046\uff96\047\uff96\050\uff96\052" +
    "\uff96\057\uff96\067\uff96\071\uff96\001\002\000\054\014\uff97" +
    "\026\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\046\uff97\047\uff97\050\uff97\052\uff97\057\uff97\067\uff97\071" +
    "\uff97\001\002\000\004\025\205\001\002\000\032\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\030" +
    "\073\051\103\102\101\103\072\104\067\001\002\000\054" +
    "\014\uff94\026\uff94\027\uff94\030\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\046\uff94\047\uff94\050\uff94\052\uff94\057\uff94\067" +
    "\uff94\071\uff94\001\002\000\054\014\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\052\uff8a\057\uff8a\067\uff8a\071\uff8a\001\002\000" +
    "\054\014\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\046\uff8f\047\uff8f\050\uff8f\052\uff8f\057\uff8f" +
    "\067\uff8f\071\uff8f\001\002\000\054\014\uff98\026\uff98\027" +
    "\uff98\030\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\046\uff98\047" +
    "\uff98\050\uff98\052\uff98\057\uff98\067\uff98\071\uff98\001\002" +
    "\000\044\004\070\005\077\006\071\007\105\010\074\011" +
    "\102\016\053\017\014\020\016\023\006\024\031\025\100" +
    "\030\073\051\103\102\101\103\072\104\067\001\002\000" +
    "\004\025\174\001\002\000\062\014\uff92\025\150\026\uff92" +
    "\027\uff92\030\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\046\uff92" +
    "\047\uff92\050\uff92\052\uff92\057\uff92\067\uff92\070\147\071" +
    "\uff92\100\146\001\002\000\032\004\070\005\077\006\071" +
    "\007\105\010\074\011\102\025\100\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\042\014\121\027\117" +
    "\030\111\032\115\033\123\034\112\035\122\036\106\037" +
    "\125\040\114\041\120\042\116\043\113\046\124\047\107" +
    "\050\110\001\002\000\054\014\uff95\026\uff95\027\uff95\030" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\046\uff95\047\uff95\050" +
    "\uff95\052\uff95\057\uff95\067\uff95\071\uff95\001\002\000\032" +
    "\004\070\005\077\006\071\007\105\010\074\011\102\025" +
    "\100\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\032\004\070\005\077\006\071\007\105\010\074\011" +
    "\102\025\100\030\073\051\103\102\101\103\072\104\067" +
    "\001\002\000\032\004\070\005\077\006\071\007\105\010" +
    "\074\011\102\025\100\030\073\051\103\102\101\103\072" +
    "\104\067\001\002\000\032\004\070\005\077\006\071\007" +
    "\105\010\074\011\102\025\100\030\073\051\103\102\101" +
    "\103\072\104\067\001\002\000\032\004\070\005\077\006" +
    "\071\007\105\010\074\011\102\025\100\030\073\051\103" +
    "\102\101\103\072\104\067\001\002\000\032\004\070\005" +
    "\077\006\071\007\105\010\074\011\102\025\100\030\073" +
    "\051\103\102\101\103\072\104\067\001\002\000\032\004" +
    "\070\005\077\006\071\007\105\010\074\011\102\025\100" +
    "\030\073\051\103\102\101\103\072\104\067\001\002\000" +
    "\032\004\070\005\077\006\071\007\105\010\074\011\102" +
    "\025\100\030\073\051\103\102\101\103\072\104\067\001" +
    "\002\000\032\004\070\005\077\006\071\007\105\010\074" +
    "\011\102\025\100\030\073\051\103\102\101\103\072\104" +
    "\067\001\002\000\032\004\070\005\077\006\071\007\105" +
    "\010\074\011\102\025\100\030\073\051\103\102\101\103" +
    "\072\104\067\001\002\000\032\004\070\005\077\006\071" +
    "\007\105\010\074\011\102\025\100\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\060\002\uffd1\003\uffd1" +
    "\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\053\uffd1\054\uffd1\056\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\101\uffd1\001\002\000\032\004\070\005\077\006\071" +
    "\007\105\010\074\011\102\025\100\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\032\004\070\005\077" +
    "\006\071\007\105\010\074\011\102\025\100\030\073\051" +
    "\103\102\101\103\072\104\067\001\002\000\032\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\030" +
    "\073\051\103\102\101\103\072\104\067\001\002\000\032" +
    "\004\070\005\077\006\071\007\105\010\074\011\102\025" +
    "\100\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\054\014\uffa1\026\uffa1\027\117\030\111\032\115\033" +
    "\123\034\112\035\122\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\057" +
    "\uffa1\067\uffa1\071\uffa1\001\002\000\054\014\uff99\026\uff99" +
    "\027\117\030\111\032\115\033\123\034\112\035\122\036" +
    "\106\037\125\040\114\041\120\042\116\043\113\046\uff99" +
    "\047\107\050\110\052\uff99\057\uff99\067\uff99\071\uff99\001" +
    "\002\000\054\014\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5" +
    "\033\uffa5\034\112\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5" +
    "\057\uffa5\067\uffa5\071\uffa5\001\002\000\054\014\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\112\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\052\uffa3\057\uffa3\067\uffa3\071\uffa3" +
    "\001\002\000\054\014\uff9f\026\uff9f\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\046\uff9f\047\uff9f\050\uff9f\052" +
    "\uff9f\057\uff9f\067\uff9f\071\uff9f\001\002\000\054\014\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\032\115\033\123\034\112\035" +
    "\122\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\052\uffa8\057\uffa8\067\uffa8\071" +
    "\uffa8\001\002\000\054\014\uff9e\026\uff9e\027\117\030\111" +
    "\032\115\033\123\034\112\035\122\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\052\uff9e\057\uff9e\067\uff9e\071\uff9e\001\002\000\054\014" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\034\112" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\057\uffa6\067\uffa6" +
    "\071\uffa6\001\002\000\054\014\uffa0\026\uffa0\027\117\030" +
    "\111\032\115\033\123\034\112\035\122\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\057\uffa0\067\uffa0\071\uffa0\001\002\000\054" +
    "\014\uff9d\026\uff9d\027\117\030\111\032\115\033\123\034" +
    "\112\035\122\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\057\uff9d\067" +
    "\uff9d\071\uff9d\001\002\000\052\014\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\052\uffa4\057\uffa4\067\uffa4\071\uffa4\001\002\000\054\014" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\032\115\033\123\034\112" +
    "\035\122\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\052\uffa7\057\uffa7\067\uffa7" +
    "\071\uffa7\001\002\000\054\014\uff9b\026\uff9b\027\117\030" +
    "\111\032\115\033\123\034\112\035\122\036\106\037\125" +
    "\040\114\041\120\042\116\043\113\046\uff9b\047\uff9b\050" +
    "\uff9b\052\uff9b\057\uff9b\067\uff9b\071\uff9b\001\002\000\054" +
    "\014\uff9a\026\uff9a\027\117\030\111\032\115\033\123\034" +
    "\112\035\122\036\106\037\125\040\114\041\120\042\116" +
    "\043\113\046\uff9a\047\uff9a\050\110\052\uff9a\057\uff9a\067" +
    "\uff9a\071\uff9a\001\002\000\054\014\uffa2\026\uffa2\027\117" +
    "\030\111\032\115\033\123\034\112\035\122\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\052\uffa2\057\uffa2\067\uffa2\071\uffa2\001\002\000" +
    "\054\014\uff9c\026\uff9c\027\117\030\111\032\115\033\123" +
    "\034\112\035\122\036\106\037\125\040\114\041\120\042" +
    "\116\043\113\046\uff9c\047\uff9c\050\uff9c\052\uff9c\057\uff9c" +
    "\067\uff9c\071\uff9c\001\002\000\006\077\165\105\164\001" +
    "\002\000\032\004\070\005\077\006\071\007\105\010\074" +
    "\011\102\025\100\030\073\051\103\102\101\103\072\104" +
    "\067\001\002\000\034\004\070\005\077\006\071\007\105" +
    "\010\074\011\102\025\100\026\152\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\006\026\155\067\154" +
    "\001\002\000\054\014\uffad\026\uffad\027\uffad\030\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\046\uffad\047\uffad\050\uffad\052" +
    "\uffad\057\uffad\067\uffad\071\uffad\001\002\000\044\026\uffab" +
    "\027\117\030\111\032\115\033\123\034\112\035\122\036" +
    "\106\037\125\040\114\041\120\042\116\043\113\046\124" +
    "\047\107\050\110\067\uffab\001\002\000\032\004\070\005" +
    "\077\006\071\007\105\010\074\011\102\025\100\030\073" +
    "\051\103\102\101\103\072\104\067\001\002\000\054\014" +
    "\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\046\uffae\047\uffae\050\uffae\052\uffae\057\uffae\067\uffae" +
    "\071\uffae\001\002\000\044\026\uffac\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\106\037\125\040\114" +
    "\041\120\042\116\043\113\046\124\047\107\050\110\067" +
    "\uffac\001\002\000\042\027\117\030\111\032\115\033\123" +
    "\034\112\035\122\036\106\037\125\040\114\041\120\042" +
    "\116\043\113\046\124\047\107\050\110\071\160\001\002" +
    "\000\056\014\uff91\026\uff91\027\uff91\030\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\046\uff91\047\uff91\050\uff91\052\uff91\057" +
    "\uff91\067\uff91\070\161\071\uff91\001\002\000\032\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\030" +
    "\073\051\103\102\101\103\072\104\067\001\002\000\042" +
    "\027\117\030\111\032\115\033\123\034\112\035\122\036" +
    "\106\037\125\040\114\041\120\042\116\043\113\046\124" +
    "\047\107\050\110\071\163\001\002\000\054\014\uff90\026" +
    "\uff90\027\uff90\030\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\046" +
    "\uff90\047\uff90\050\uff90\052\uff90\057\uff90\067\uff90\071\uff90" +
    "\001\002\000\004\025\171\001\002\000\004\025\166\001" +
    "\002\000\032\004\070\005\077\006\071\007\105\010\074" +
    "\011\102\025\100\030\073\051\103\102\101\103\072\104" +
    "\067\001\002\000\042\026\170\027\117\030\111\032\115" +
    "\033\123\034\112\035\122\036\106\037\125\040\114\041" +
    "\120\042\116\043\113\046\124\047\107\050\110\001\002" +
    "\000\054\014\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\057" +
    "\uffbb\067\uffbb\071\uffbb\001\002\000\032\004\070\005\077" +
    "\006\071\007\105\010\074\011\102\025\100\030\073\051" +
    "\103\102\101\103\072\104\067\001\002\000\042\026\173" +
    "\027\117\030\111\032\115\033\123\034\112\035\122\036" +
    "\106\037\125\040\114\041\120\042\116\043\113\046\124" +
    "\047\107\050\110\001\002\000\054\014\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\052\uff8b\057\uff8b\067\uff8b\071\uff8b\001\002" +
    "\000\032\004\070\005\077\006\071\007\105\010\074\011" +
    "\102\025\100\030\073\051\103\102\101\103\072\104\067" +
    "\001\002\000\042\026\176\027\117\030\111\032\115\033" +
    "\123\034\112\035\122\036\106\037\125\040\114\041\120" +
    "\042\116\043\113\046\124\047\107\050\110\001\002\000" +
    "\054\014\uff8e\026\uff8e\027\uff8e\030\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e\057\uff8e" +
    "\067\uff8e\071\uff8e\001\002\000\004\026\202\001\002\000" +
    "\042\026\201\027\117\030\111\032\115\033\123\034\112" +
    "\035\122\036\106\037\125\040\114\041\120\042\116\043" +
    "\113\046\124\047\107\050\110\001\002\000\054\014\uff93" +
    "\026\uff93\027\uff93\030\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\046\uff93\047\uff93\050\uff93\052\uff93\057\uff93\067\uff93\071" +
    "\uff93\001\002\000\032\004\070\005\077\006\071\007\105" +
    "\010\074\011\102\025\100\030\073\051\103\102\101\103" +
    "\072\104\067\001\002\000\054\014\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\052\uffa9\057\uffa9\067\uffa9\071\uffa9\001\002\000" +
    "\054\014\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\057\uffaa" +
    "\067\uffaa\071\uffaa\001\002\000\032\004\070\005\077\006" +
    "\071\007\105\010\074\011\102\025\100\030\073\051\103" +
    "\102\101\103\072\104\067\001\002\000\042\026\207\027" +
    "\117\030\111\032\115\033\123\034\112\035\122\036\106" +
    "\037\125\040\114\041\120\042\116\043\113\046\124\047" +
    "\107\050\110\001\002\000\054\014\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\052\uff8d\057\uff8d\067\uff8d\071\uff8d\001\002\000" +
    "\032\004\070\005\077\006\071\007\105\010\074\011\102" +
    "\025\100\030\073\051\103\102\101\103\072\104\067\001" +
    "\002\000\042\026\212\027\117\030\111\032\115\033\123" +
    "\034\112\035\122\036\106\037\125\040\114\041\120\042" +
    "\116\043\113\046\124\047\107\050\110\001\002\000\054" +
    "\014\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\046\uff8c\047\uff8c\050\uff8c\052\uff8c\057\uff8c\067" +
    "\uff8c\071\uff8c\001\002\000\004\045\214\001\002\000\014" +
    "\016\053\017\014\020\016\023\006\024\031\001\002\000" +
    "\010\014\216\044\217\070\220\001\002\000\060\002\uffe4" +
    "\003\uffe4\011\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\072\uffe4\073" +
    "\uffe4\074\uffe4\101\uffe4\001\002\000\032\004\070\005\077" +
    "\006\071\007\105\010\074\011\102\025\100\030\073\051" +
    "\103\102\101\103\072\104\067\001\002\000\004\071\221" +
    "\001\002\000\010\014\222\044\223\070\224\001\002\000" +
    "\060\002\uffc5\003\uffc5\011\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\053\uffc5\054" +
    "\uffc5\056\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\101\uffc5\001\002\000\004\070" +
    "\245\001\002\000\004\071\225\001\002\000\004\044\226" +
    "\001\002\000\004\070\227\001\002\000\004\070\231\001" +
    "\002\000\006\067\237\071\240\001\002\000\032\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\030" +
    "\073\051\103\102\101\103\072\104\067\001\002\000\006" +
    "\067\234\071\235\001\002\000\044\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\106\037\125\040\114" +
    "\041\120\042\116\043\113\046\124\047\107\050\110\067" +
    "\uffc2\071\uffc2\001\002\000\032\004\070\005\077\006\071" +
    "\007\105\010\074\011\102\025\100\030\073\051\103\102" +
    "\101\103\072\104\067\001\002\000\006\067\uffc0\071\uffc0" +
    "\001\002\000\044\027\117\030\111\032\115\033\123\034" +
    "\112\035\122\036\106\037\125\040\114\041\120\042\116" +
    "\043\113\046\124\047\107\050\110\067\uffc3\071\uffc3\001" +
    "\002\000\004\070\242\001\002\000\004\014\241\001\002" +
    "\000\060\002\uffc7\003\uffc7\011\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\053\uffc7" +
    "\054\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\101\uffc7\001\002\000\032" +
    "\004\070\005\077\006\071\007\105\010\074\011\102\025" +
    "\100\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\006\067\234\071\244\001\002\000\006\067\uffc1\071" +
    "\uffc1\001\002\000\032\004\070\005\077\006\071\007\105" +
    "\010\074\011\102\025\100\030\073\051\103\102\101\103" +
    "\072\104\067\001\002\000\006\067\234\071\247\001\002" +
    "\000\004\014\250\001\002\000\060\002\uffc9\003\uffc9\011" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\053\uffc9\054\uffc9\056\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\101\uffc9\001\002\000\042\014\252\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\106\037\125\040\114" +
    "\041\120\042\116\043\113\046\124\047\107\050\110\001" +
    "\002\000\060\002\uffe5\003\uffe5\011\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\053" +
    "\uffe5\054\uffe5\056\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\072\uffe5\073\uffe5\074\uffe5\101\uffe5\001\002\000" +
    "\004\002\001\001\002\000\042\027\117\030\111\032\115" +
    "\033\123\034\112\035\122\036\106\037\125\040\114\041" +
    "\120\042\116\043\113\046\124\047\107\050\110\052\255" +
    "\001\002\000\054\003\036\011\034\015\020\016\053\017" +
    "\014\020\016\021\060\022\007\023\006\024\031\054\032" +
    "\056\023\061\021\062\046\063\061\064\037\065\015\072" +
    "\040\073\045\074\033\101\035\001\002\000\056\003\036" +
    "\011\034\015\020\016\053\017\014\020\016\021\060\022" +
    "\007\023\006\024\031\053\257\054\032\056\023\061\021" +
    "\062\046\063\061\064\037\065\015\072\040\073\045\074" +
    "\033\101\035\001\002\000\060\002\uffd2\003\uffd2\011\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\053\uffd2\054\uffd2\056\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\072\uffd2\073\uffd2\074\uffd2\101" +
    "\uffd2\001\002\000\004\025\261\001\002\000\034\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\026" +
    "\263\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\006\026\265\067\154\001\002\000\004\014\264\001" +
    "\002\000\060\002\uffb1\003\uffb1\011\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\053" +
    "\uffb1\054\uffb1\056\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\072\uffb1\073\uffb1\074\uffb1\101\uffb1\001\002\000" +
    "\004\014\266\001\002\000\060\002\uffb2\003\uffb2\011\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\053\uffb2\054\uffb2\056\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\072\uffb2\073\uffb2\074\uffb2\101" +
    "\uffb2\001\002\000\004\025\270\001\002\000\016\016\053" +
    "\017\014\020\016\023\006\024\031\026\273\001\002\000" +
    "\004\011\306\001\002\000\006\026\300\067\277\001\002" +
    "\000\004\052\274\001\002\000\054\003\036\011\034\015" +
    "\020\016\053\017\014\020\016\021\060\022\007\023\006" +
    "\024\031\054\032\056\023\061\021\062\046\063\061\064" +
    "\037\065\015\072\040\073\045\074\033\101\035\001\002" +
    "\000\056\003\036\011\034\015\020\016\053\017\014\020" +
    "\016\021\060\022\007\023\006\024\031\053\276\054\032" +
    "\056\023\061\021\062\046\063\061\064\037\065\015\072" +
    "\040\073\045\074\033\101\035\001\002\000\060\002\uffb9" +
    "\003\uffb9\011\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\053\uffb9\054\uffb9\056\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\101\uffb9\001\002\000\014\016\053\017\014" +
    "\020\016\023\006\024\031\001\002\000\004\052\301\001" +
    "\002\000\054\003\036\011\034\015\020\016\053\017\014" +
    "\020\016\021\060\022\007\023\006\024\031\054\032\056" +
    "\023\061\021\062\046\063\061\064\037\065\015\072\040" +
    "\073\045\074\033\101\035\001\002\000\056\003\036\011" +
    "\034\015\020\016\053\017\014\020\016\021\060\022\007" +
    "\023\006\024\031\053\303\054\032\056\023\061\021\062" +
    "\046\063\061\064\037\065\015\072\040\073\045\074\033" +
    "\101\035\001\002\000\060\002\uffba\003\uffba\011\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\053\uffba\054\uffba\056\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\072\uffba\073\uffba\074\uffba\101\uffba" +
    "\001\002\000\004\011\305\001\002\000\006\026\uffb4\067" +
    "\uffb4\001\002\000\006\026\uffb3\067\uffb3\001\002\000\060" +
    "\002\uffd0\003\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\053\uffd0\054\uffd0" +
    "\056\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\101\uffd0\001\002\000\060\002\uffe8" +
    "\003\uffe8\011\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\053\uffe8\054\uffe8\056\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\101\uffe8\001\002\000\060\002\uffb5\003\uffb5" +
    "\011\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\053\uffb5\054\uffb5\056\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\101\uffb5\001\002\000\042\014\313\027\117\030\111" +
    "\032\115\033\123\034\112\035\122\036\106\037\125\040" +
    "\114\041\120\042\116\043\113\046\124\047\107\050\110" +
    "\001\002\000\060\002\uffb6\003\uffb6\011\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\053\uffb6\054\uffb6\056\uffb6\061\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\072\uffb6\073\uffb6\074\uffb6\101\uffb6\001\002" +
    "\000\004\014\352\001\002\000\004\076\345\001\002\000" +
    "\032\004\070\005\077\006\071\007\105\010\074\011\102" +
    "\025\100\030\073\051\103\102\101\103\072\104\067\001" +
    "\002\000\032\004\070\005\077\006\071\007\105\010\074" +
    "\011\102\025\100\030\073\051\103\102\101\103\072\104" +
    "\067\001\002\000\004\014\327\001\002\000\034\004\070" +
    "\005\077\006\071\007\105\010\074\011\102\025\100\026" +
    "\323\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\006\026\325\067\154\001\002\000\004\014\324\001" +
    "\002\000\060\002\uffaf\003\uffaf\011\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\053" +
    "\uffaf\054\uffaf\056\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\072\uffaf\073\uffaf\074\uffaf\101\uffaf\001\002\000" +
    "\004\014\326\001\002\000\060\002\uffb0\003\uffb0\011\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\053\uffb0\054\uffb0\056\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\072\uffb0\073\uffb0\074\uffb0\101" +
    "\uffb0\001\002\000\060\002\uff89\003\uff89\011\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024" +
    "\uff89\053\uff89\054\uff89\056\uff89\061\uff89\062\uff89\063\uff89" +
    "\064\uff89\065\uff89\072\uff89\073\uff89\074\uff89\101\uff89\001" +
    "\002\000\042\027\117\030\111\032\115\033\123\034\112" +
    "\035\122\036\106\037\125\040\114\041\120\042\116\043" +
    "\113\046\124\047\107\050\110\071\331\001\002\000\006" +
    "\044\332\070\333\001\002\000\032\004\070\005\077\006" +
    "\071\007\105\010\074\011\102\025\100\030\073\051\103" +
    "\102\101\103\072\104\067\001\002\000\032\004\070\005" +
    "\077\006\071\007\105\010\074\011\102\025\100\030\073" +
    "\051\103\102\101\103\072\104\067\001\002\000\042\027" +
    "\117\030\111\032\115\033\123\034\112\035\122\036\106" +
    "\037\125\040\114\041\120\042\116\043\113\046\124\047" +
    "\107\050\110\071\335\001\002\000\004\044\336\001\002" +
    "\000\032\004\070\005\077\006\071\007\105\010\074\011" +
    "\102\025\100\030\073\051\103\102\101\103\072\104\067" +
    "\001\002\000\042\014\340\027\117\030\111\032\115\033" +
    "\123\034\112\035\122\036\106\037\125\040\114\041\120" +
    "\042\116\043\113\046\124\047\107\050\110\001\002\000" +
    "\060\002\uffbe\003\uffbe\011\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\053\uffbe\054" +
    "\uffbe\056\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\101\uffbe\001\002\000\042\014" +
    "\342\027\117\030\111\032\115\033\123\034\112\035\122" +
    "\036\106\037\125\040\114\041\120\042\116\043\113\046" +
    "\124\047\107\050\110\001\002\000\060\002\uffbf\003\uffbf" +
    "\011\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\053\uffbf\054\uffbf\056\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\101\uffbf\001\002\000\042\014\344\027\117\030\111" +
    "\032\115\033\123\034\112\035\122\036\106\037\125\040" +
    "\114\041\120\042\116\043\113\046\124\047\107\050\110" +
    "\001\002\000\106\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030" +
    "\uffe1\051\uffe1\053\uffe1\054\uffe1\056\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\072\uffe1\073\uffe1\074\uffe1\101" +
    "\uffe1\102\uffe1\103\uffe1\104\uffe1\001\002\000\004\025\346" +
    "\001\002\000\032\004\070\005\077\006\071\007\105\010" +
    "\074\011\102\025\100\030\073\051\103\102\101\103\072" +
    "\104\067\001\002\000\042\026\350\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\106\037\125\040\114" +
    "\041\120\042\116\043\113\046\124\047\107\050\110\001" +
    "\002\000\004\014\351\001\002\000\060\002\uffbc\003\uffbc" +
    "\011\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\053\uffbc\054\uffbc\056\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\101\uffbc\001\002\000\060\002\uff88\003\uff88\011\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\053\uff88\054\uff88\056\uff88\061\uff88\062\uff88" +
    "\063\uff88\064\uff88\065\uff88\072\uff88\073\uff88\074\uff88\101" +
    "\uff88\001\002\000\014\016\053\017\014\020\016\023\006" +
    "\024\031\001\002\000\004\042\355\001\002\000\004\011" +
    "\356\001\002\000\004\044\357\001\002\000\004\075\360" +
    "\001\002\000\004\074\361\001\002\000\004\025\362\001" +
    "\002\000\004\026\363\001\002\000\004\014\364\001\002" +
    "\000\060\002\uffbd\003\uffbd\011\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\053\uffbd" +
    "\054\uffbd\056\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\072\uffbd\073\uffbd\074\uffbd\101\uffbd\001\002\000\032" +
    "\004\070\005\077\006\071\007\105\010\074\011\102\025" +
    "\100\030\073\051\103\102\101\103\072\104\067\001\002" +
    "\000\042\026\367\027\117\030\111\032\115\033\123\034" +
    "\112\035\122\036\106\037\125\040\114\041\120\042\116" +
    "\043\113\046\124\047\107\050\110\001\002\000\004\052" +
    "\370\001\002\000\054\003\036\011\034\015\020\016\053" +
    "\017\014\020\016\021\060\022\007\023\006\024\031\054" +
    "\032\056\023\061\021\062\046\063\061\064\037\065\015" +
    "\072\040\073\045\074\033\101\035\001\002\000\056\003" +
    "\036\011\034\015\020\016\053\017\014\020\016\021\060" +
    "\022\007\023\006\024\031\053\372\054\032\056\023\061" +
    "\021\062\046\063\061\064\037\065\015\072\040\073\045" +
    "\074\033\101\035\001\002\000\062\002\uffe0\003\uffe0\011" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\053\uffe0\054\uffe0\055\373\056\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\101\uffe0\001\002\000\006\052\374\054\032\001" +
    "\002\000\054\003\036\011\034\015\020\016\053\017\014" +
    "\020\016\021\060\022\007\023\006\024\031\054\032\056" +
    "\023\061\021\062\046\063\061\064\037\065\015\072\040" +
    "\073\045\074\033\101\035\001\002\000\060\002\uffde\003" +
    "\uffde\011\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\053\uffde\054\uffde\056\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\072\uffde\073\uffde" +
    "\074\uffde\101\uffde\001\002\000\056\003\036\011\034\015" +
    "\020\016\053\017\014\020\016\021\060\022\007\023\006" +
    "\024\031\053\377\054\032\056\023\061\021\062\046\063" +
    "\061\064\037\065\015\072\040\073\045\074\033\101\035" +
    "\001\002\000\060\002\uffdf\003\uffdf\011\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\053\uffdf\054\uffdf\056\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\072\uffdf\073\uffdf\074\uffdf\101\uffdf\001\002" +
    "\000\042\027\117\030\111\032\115\033\123\034\112\035" +
    "\122\036\106\037\125\040\114\041\120\042\116\043\113" +
    "\046\124\047\107\050\110\052\u0101\001\002\000\034\004" +
    "\070\005\077\006\071\007\105\010\074\011\102\025\100" +
    "\030\073\051\103\060\u0106\102\101\103\072\104\067\001" +
    "\002\000\036\004\070\005\077\006\071\007\105\010\074" +
    "\011\102\025\100\030\073\051\103\053\u010f\060\u0106\102" +
    "\101\103\072\104\067\001\002\000\036\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\025\uffd9\030\uffd9\051" +
    "\uffd9\053\uffd9\060\uffd9\102\uffd9\103\uffd9\104\uffd9\001\002" +
    "\000\004\053\u010e\001\002\000\042\027\117\030\111\032" +
    "\115\033\123\034\112\035\122\036\106\037\125\040\114" +
    "\041\120\042\116\043\113\046\124\047\107\050\110\057" +
    "\u010a\001\002\000\004\052\u0107\001\002\000\054\003\036" +
    "\011\034\015\020\016\053\017\014\020\016\021\060\022" +
    "\007\023\006\024\031\054\032\056\023\061\021\062\046" +
    "\063\061\064\037\065\015\072\040\073\045\074\033\101" +
    "\035\001\002\000\056\003\036\011\034\015\020\016\053" +
    "\017\014\020\016\021\060\022\007\023\006\024\031\053" +
    "\u0109\054\032\056\023\061\021\062\046\063\061\064\037" +
    "\065\015\072\040\073\045\074\033\101\035\001\002\000" +
    "\004\053\uffd7\001\002\000\004\052\u010b\001\002\000\054" +
    "\003\036\011\034\015\020\016\053\017\014\020\016\021" +
    "\060\022\007\023\006\024\031\054\032\056\023\061\021" +
    "\062\046\063\061\064\037\065\015\072\040\073\045\074" +
    "\033\101\035\001\002\000\056\003\036\011\034\015\020" +
    "\016\053\017\014\020\016\021\060\022\007\023\006\024" +
    "\031\053\u010d\054\032\056\023\061\021\062\046\063\061" +
    "\064\037\065\015\072\040\073\045\074\033\101\035\001" +
    "\002\000\036\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\025\uffd8\030\uffd8\051\uffd8\053\uffd8\060\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\001\002\000\060\002\uffdb\003\uffdb" +
    "\011\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\053\uffdb\054\uffdb\056\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\101\uffdb\001\002\000\060\002\uffdd\003\uffdd\011\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\053\uffdd\054\uffdd\056\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\072\uffdd\073\uffdd\074\uffdd\101" +
    "\uffdd\001\002\000\036\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\025\uffda\030\uffda\051\uffda\053\uffda\060" +
    "\uffda\102\uffda\103\uffda\104\uffda\001\002\000\004\053\u0112" +
    "\001\002\000\060\002\uffdc\003\uffdc\011\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\053\uffdc\054\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\072\uffdc\073\uffdc\074\uffdc\101\uffdc\001\002" +
    "\000\004\011\u0114\001\002\000\004\044\316\001\002\000" +
    "\032\004\070\005\077\006\071\007\105\010\074\011\102" +
    "\025\100\030\073\051\103\102\101\103\072\104\067\001" +
    "\002\000\042\014\u0117\027\117\030\111\032\115\033\123" +
    "\034\112\035\122\036\106\037\125\040\114\041\120\042" +
    "\116\043\113\046\124\047\107\050\110\001\002\000\004" +
    "\011\u0118\001\002\000\010\012\u0120\013\u011e\044\u011f\001" +
    "\002\000\004\026\u011a\001\002\000\004\052\u011b\001\002" +
    "\000\054\003\036\011\034\015\020\016\053\017\014\020" +
    "\016\021\060\022\007\023\006\024\031\054\032\056\023" +
    "\061\021\062\046\063\061\064\037\065\015\072\040\073" +
    "\045\074\033\101\035\001\002\000\056\003\036\011\034" +
    "\015\020\016\053\017\014\020\016\021\060\022\007\023" +
    "\006\024\031\053\u011d\054\032\056\023\061\021\062\046" +
    "\063\061\064\037\065\015\072\040\073\045\074\033\101" +
    "\035\001\002\000\060\002\uffd6\003\uffd6\011\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\053\uffd6\054\uffd6\056\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\072\uffd6\073\uffd6\074\uffd6\101\uffd6\001" +
    "\002\000\004\026\uffd3\001\002\000\032\004\070\005\077" +
    "\006\071\007\105\010\074\011\102\025\100\030\073\051" +
    "\103\102\101\103\072\104\067\001\002\000\004\026\uffd4" +
    "\001\002\000\042\026\uffd5\027\117\030\111\032\115\033" +
    "\123\034\112\035\122\036\106\037\125\040\114\041\120" +
    "\042\116\043\113\046\124\047\107\050\110\001\002\000" +
    "\032\004\070\005\077\006\071\007\105\010\074\011\102" +
    "\025\100\030\073\051\103\102\101\103\072\104\067\001" +
    "\002\000\042\026\u0124\027\117\030\111\032\115\033\123" +
    "\034\112\035\122\036\106\037\125\040\114\041\120\042" +
    "\116\043\113\046\124\047\107\050\110\001\002\000\004" +
    "\014\u0125\001\002\000\060\002\uffe6\003\uffe6\011\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\053\uffe6\054\uffe6\056\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\072\uffe6\073\uffe6\074\uffe6\101\uffe6" +
    "\001\002\000\060\002\uffcf\003\uffcf\011\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\053\uffcf\054\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\072\uffcf\073\uffcf\074\uffcf\101\uffcf\001\002" +
    "\000\004\045\u0128\001\002\000\014\016\053\017\014\020" +
    "\016\023\006\024\031\001\002\000\010\014\u012a\044\u012b" +
    "\070\u012c\001\002\000\060\002\uffe2\003\uffe2\011\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\053\uffe2\054\uffe2\056\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\072\uffe2\073\uffe2\074\uffe2\101\uffe2" +
    "\001\002\000\032\004\070\005\077\006\071\007\105\010" +
    "\074\011\102\025\100\030\073\051\103\102\101\103\072" +
    "\104\067\001\002\000\004\071\u012d\001\002\000\010\014" +
    "\u012e\044\u012f\070\u0130\001\002\000\060\002\uffc4\003\uffc4" +
    "\011\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\053\uffc4\054\uffc4\056\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\101\uffc4\001\002\000\004\070\u0137\001\002\000\004" +
    "\071\u0131\001\002\000\004\044\u0132\001\002\000\004\070" +
    "\u0133\001\002\000\004\070\231\001\002\000\006\067\237" +
    "\071\u0135\001\002\000\004\014\u0136\001\002\000\060\002" +
    "\uffc6\003\uffc6\011\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\053\uffc6\054\uffc6\056" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\101\uffc6\001\002\000\032\004\070\005" +
    "\077\006\071\007\105\010\074\011\102\025\100\030\073" +
    "\051\103\102\101\103\072\104\067\001\002\000\006\067" +
    "\234\071\u0139\001\002\000\004\014\u013a\001\002\000\060" +
    "\002\uffc8\003\uffc8\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\053\uffc8\054\uffc8" +
    "\056\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\101\uffc8\001\002\000\042\014\u013c" +
    "\027\117\030\111\032\115\033\123\034\112\035\122\036" +
    "\106\037\125\040\114\041\120\042\116\043\113\046\124" +
    "\047\107\050\110\001\002\000\060\002\uffe3\003\uffe3\011" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\053\uffe3\054\uffe3\056\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\101\uffe3\001\002\000\004\025\u013e\001\002\000\016\016" +
    "\053\017\014\020\016\023\006\024\031\026\u0140\001\002" +
    "\000\006\026\u0144\067\277\001\002\000\004\052\u0141\001" +
    "\002\000\054\003\036\011\034\015\020\016\053\017\014" +
    "\020\016\021\060\022\007\023\006\024\031\054\032\056" +
    "\023\061\021\062\046\063\061\064\037\065\015\072\040" +
    "\073\045\074\033\101\035\001\002\000\056\003\036\011" +
    "\034\015\020\016\053\017\014\020\016\021\060\022\007" +
    "\023\006\024\031\053\u0143\054\032\056\023\061\021\062" +
    "\046\063\061\064\037\065\015\072\040\073\045\074\033" +
    "\101\035\001\002\000\060\002\uffb7\003\uffb7\011\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\053\uffb7\054\uffb7\056\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\072\uffb7\073\uffb7\074\uffb7\101\uffb7" +
    "\001\002\000\004\052\u0145\001\002\000\054\003\036\011" +
    "\034\015\020\016\053\017\014\020\016\021\060\022\007" +
    "\023\006\024\031\054\032\056\023\061\021\062\046\063" +
    "\061\064\037\065\015\072\040\073\045\074\033\101\035" +
    "\001\002\000\056\003\036\011\034\015\020\016\053\017" +
    "\014\020\016\021\060\022\007\023\006\024\031\053\u0147" +
    "\054\032\056\023\061\021\062\046\063\061\064\037\065" +
    "\015\072\040\073\045\074\033\101\035\001\002\000\060" +
    "\002\uffb8\003\uffb8\011\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\053\uffb8\054\uffb8" +
    "\056\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\101\uffb8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\064\002\053\003\021\004\016\005\046\006" +
    "\041\007\040\010\054\011\051\012\047\013\007\014\043" +
    "\016\026\017\055\020\010\021\023\025\003\030\004\032" +
    "\025\033\012\034\011\036\056\040\027\041\024\043\050" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\063\005" +
    "\046\006\041\007\040\010\054\011\051\012\047\013\007" +
    "\014\043\016\026\017\055\020\010\021\023\025\003\030" +
    "\004\032\025\033\012\034\011\036\056\040\027\041\024" +
    "\043\050\045\042\001\001\000\010\031\377\042\074\044" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\311\042\074\044\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\253\042\074\044\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\062\004\016\005\046" +
    "\006\041\007\040\010\054\011\051\012\047\013\007\014" +
    "\043\016\026\017\055\020\010\021\023\025\003\030\004" +
    "\032\025\033\012\034\011\036\056\040\027\041\024\043" +
    "\050\045\042\001\001\000\060\004\063\005\046\006\041" +
    "\007\040\010\054\011\051\012\047\013\007\014\043\016" +
    "\026\017\055\020\010\021\023\025\003\030\004\032\025" +
    "\033\012\034\011\036\056\040\027\041\024\043\050\045" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\103\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\203\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\176\031\177\042\074\044\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\144\042\074\044\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\143\042\074\044\075\001\001\000\010\031\142\042\074" +
    "\044\075\001\001\000\010\031\141\042\074\044\075\001" +
    "\001\000\010\031\140\042\074\044\075\001\001\000\010" +
    "\031\137\042\074\044\075\001\001\000\010\031\136\042" +
    "\074\044\075\001\001\000\010\031\135\042\074\044\075" +
    "\001\001\000\010\031\134\042\074\044\075\001\001\000" +
    "\010\031\133\042\074\044\075\001\001\000\010\031\132" +
    "\042\074\044\075\001\001\000\010\031\131\042\074\044" +
    "\075\001\001\000\002\001\001\000\010\031\130\042\074" +
    "\044\075\001\001\000\010\031\127\042\074\044\075\001" +
    "\001\000\010\031\126\042\074\044\075\001\001\000\010" +
    "\031\125\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\156\042\074\044\075\001\001\000\012\031\152\037" +
    "\150\042\074\044\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\155\042\074\044" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\161\042\074\044" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\166\042\074\044" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\171\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\174\042\074\044\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\202\042\074" +
    "\044\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\205\042\074\044\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\210\042\074\044\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\250\042\074\044\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\227\001\001\000\002\001\001\000\012\026" +
    "\231\031\232\042\074\044\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\235\042\074\044\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\242\031" +
    "\232\042\074\044\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\245\031\232\042\074\044\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\255\004\016\005\046\006\041" +
    "\007\040\010\054\011\051\012\047\013\007\014\043\016" +
    "\026\017\055\020\010\021\023\025\003\030\004\032\025" +
    "\033\012\034\011\036\056\040\027\041\024\043\050\045" +
    "\042\001\001\000\060\004\063\005\046\006\041\007\040" +
    "\010\054\011\051\012\047\013\007\014\043\016\026\017" +
    "\055\020\010\021\023\025\003\030\004\032\025\033\012" +
    "\034\011\036\056\040\027\041\024\043\050\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\152" +
    "\037\261\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\270\035\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\274\004\016\005\046\006\041\007\040\010" +
    "\054\011\051\012\047\013\007\014\043\016\026\017\055" +
    "\020\010\021\023\025\003\030\004\032\025\033\012\034" +
    "\011\036\056\040\027\041\024\043\050\045\042\001\001" +
    "\000\060\004\063\005\046\006\041\007\040\010\054\011" +
    "\051\012\047\013\007\014\043\016\026\017\055\020\010" +
    "\021\023\025\003\030\004\032\025\033\012\034\011\036" +
    "\056\040\027\041\024\043\050\045\042\001\001\000\002" +
    "\001\001\000\004\030\303\001\001\000\002\001\001\000" +
    "\062\003\301\004\016\005\046\006\041\007\040\010\054" +
    "\011\051\012\047\013\007\014\043\016\026\017\055\020" +
    "\010\021\023\025\003\030\004\032\025\033\012\034\011" +
    "\036\056\040\027\041\024\043\050\045\042\001\001\000" +
    "\060\004\063\005\046\006\041\007\040\010\054\011\051" +
    "\012\047\013\007\014\043\016\026\017\055\020\010\021" +
    "\023\025\003\030\004\032\025\033\012\034\011\036\056" +
    "\040\027\041\024\043\050\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\342\042\074\044\075\001\001\000" +
    "\010\031\327\042\074\044\075\001\001\000\002\001\001" +
    "\000\012\031\152\037\321\042\074\044\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\340\042\074\044\075" +
    "\001\001\000\010\031\333\042\074\044\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\336\042\074" +
    "\044\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\346\042\074\044" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\365" +
    "\042\074\044\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\370\004\016\005\046\006\041\007\040" +
    "\010\054\011\051\012\047\013\007\014\043\016\026\017" +
    "\055\020\010\021\023\025\003\030\004\032\025\033\012" +
    "\034\011\036\056\040\027\041\024\043\050\045\042\001" +
    "\001\000\060\004\063\005\046\006\041\007\040\010\054" +
    "\011\051\012\047\013\007\014\043\016\026\017\055\020" +
    "\010\021\023\025\003\030\004\032\025\033\012\034\011" +
    "\036\056\040\027\041\024\043\050\045\042\001\001\000" +
    "\002\001\001\000\004\012\374\001\001\000\062\003\375" +
    "\004\016\005\046\006\041\007\040\010\054\011\051\012" +
    "\047\013\007\014\043\016\026\017\055\020\010\021\023" +
    "\025\003\030\004\032\025\033\012\034\011\036\056\040" +
    "\027\041\024\043\050\045\042\001\001\000\002\001\001" +
    "\000\060\004\063\005\046\006\041\007\040\010\054\011" +
    "\051\012\047\013\007\014\043\016\026\017\055\020\010" +
    "\021\023\025\003\030\004\032\025\033\012\034\011\036" +
    "\056\040\027\041\024\043\050\045\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\u0101\023\u0102\024" +
    "\u0103\031\u0104\042\074\044\075\001\001\000\014\023\u010f" +
    "\024\u0110\031\u0104\042\074\044\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0107\004\016\005\046\006\041\007\040\010" +
    "\054\011\051\012\047\013\007\014\043\016\026\017\055" +
    "\020\010\021\023\025\003\030\004\032\025\033\012\034" +
    "\011\036\056\040\027\041\024\043\050\045\042\001\001" +
    "\000\060\004\063\005\046\006\041\007\040\010\054\011" +
    "\051\012\047\013\007\014\043\016\026\017\055\020\010" +
    "\021\023\025\003\030\004\032\025\033\012\034\011\036" +
    "\056\040\027\041\024\043\050\045\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u010b\004\016\005" +
    "\046\006\041\007\040\010\054\011\051\012\047\013\007" +
    "\014\043\016\026\017\055\020\010\021\023\025\003\030" +
    "\004\032\025\033\012\034\011\036\056\040\027\041\024" +
    "\043\050\045\042\001\001\000\060\004\063\005\046\006" +
    "\041\007\040\010\054\011\051\012\047\013\007\014\043" +
    "\016\026\017\055\020\010\021\023\025\003\030\004\032" +
    "\025\033\012\034\011\036\056\040\027\041\024\043\050" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0114\001\001\000\002\001\001\000" +
    "\010\031\u0115\042\074\044\075\001\001\000\002\001\001" +
    "\000\004\015\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u011b\004\016\005\046" +
    "\006\041\007\040\010\054\011\051\012\047\013\007\014" +
    "\043\016\026\017\055\020\010\021\023\025\003\030\004" +
    "\032\025\033\012\034\011\036\056\040\027\041\024\043" +
    "\050\045\042\001\001\000\060\004\063\005\046\006\041" +
    "\007\040\010\054\011\051\012\047\013\007\014\043\016" +
    "\026\017\055\020\010\021\023\025\003\030\004\032\025" +
    "\033\012\034\011\036\056\040\027\041\024\043\050\045" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\u0120\042\074\044\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u0122\042\074\044\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\u013a\042" +
    "\074\044\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u0137\031\232\042\074\044\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\270" +
    "\035\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0141\004\016\005\046\006\041\007\040\010\054" +
    "\011\051\012\047\013\007\014\043\016\026\017\055\020" +
    "\010\021\023\025\003\030\004\032\025\033\012\034\011" +
    "\036\056\040\027\041\024\043\050\045\042\001\001\000" +
    "\060\004\063\005\046\006\041\007\040\010\054\011\051" +
    "\012\047\013\007\014\043\016\026\017\055\020\010\021" +
    "\023\025\003\030\004\032\025\033\012\034\011\036\056" +
    "\040\027\041\024\043\050\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u0145\004\016\005\046" +
    "\006\041\007\040\010\054\011\051\012\047\013\007\014" +
    "\043\016\026\017\055\020\010\021\023\025\003\030\004" +
    "\032\025\033\012\034\011\036\056\040\027\041\024\043" +
    "\050\045\042\001\001\000\060\004\063\005\046\006\041" +
    "\007\040\010\054\011\051\012\047\013\007\014\043\016" +
    "\026\017\055\020\010\021\023\025\003\030\004\032\025" +
    "\033\012\034\011\036\056\040\027\041\024\043\050\045" +
    "\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECREMENTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INCREMENTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CONTINUEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNAR_MODIFICAR_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= RUN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= DECLARACION_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= ANADIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= RETORNO_VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRESION ::= PRINTLN PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, c, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, c, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC ELSE LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVEA INSTRUCCIONES LLAVEC ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SMATCH ::= MATCH EXPRESION LLAVEA CASOS LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SMATCH ::= MATCH EXPRESION LLAVEA CASOS DEFAULTCASO LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SMATCH ::= MATCH EXPRESION LLAVEA DEFAULTCASO LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Caso> casos = new LinkedList<>();
           RESULT = new Match(a, casos, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASO ::= EXPRESION SIGNOCASOMATCH LLAVEA INSTRUCCIONES LLAVEC 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEFAULTCASO ::= SIGNODEFAULTMATCH LLAVEA INSTRUCCIONES LLAVEC 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(null, b, true, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULTCASO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACTUALIZA_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncrementoDecremento(a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ACTUALIZA_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncrementoDecremento(a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CWHILE ::= WHILE EXPRESION LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CDOWHILE ::= DO LLAVEA INSTRUCCIONES LLAVEC WHILE EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(b,a,bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTINUEA ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESUNI CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(b, a, c, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_VECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESUNI CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(b, a, c, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_VECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESBI CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(b, a, c, true, aleft, aright, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_VECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC CORCHETEA CORCHETEC IGUAL CORCHETEA LISTAVALORESBI CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(b, a, c, false, aleft, aright, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_VECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Declaracion(b, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_VECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETEA CORCHETEC FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Declaracion(b, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAVALORESUNI ::= LISTAVALORESUNI COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORESUNI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAVALORESUNI ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORESUNI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTAVALORESBI ::= LISTAVALORESBI COMA CORCHETEA LISTAVALORESUNI CORCHETEC 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORESBI",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTAVALORESBI ::= CORCHETEA LISTAVALORESUNI CORCHETEC 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORESBI",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNAR_MODIFICAR_VECTOR ::= ID CORCHETEA EXPRESION CORCHETEC IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, i, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_MODIFICAR_VECTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNAR_MODIFICAR_VECTOR ::= ID CORCHETEA EXPRESION CORCHETEC CORCHETEA EXPRESION CORCHETEC IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion i2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, i, i2, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_MODIFICAR_VECTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_LISTA ::= LISTA MENORQUE TIPOS MAYORQUE ID IGUAL NEW LISTA PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionLista(b, a, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ANADIR ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Append(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELIMINAR ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINAR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODO ::= VOID ID PAR1 PARAMS PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, new Tipo(tipoDato.VOID) , bleft, bright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= VOID ID PAR1 PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID) , bleft, bright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= TIPOS ID PAR1 PARAMS PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= TIPOS ID PAR1 PAR2 LLAVEA INSTRUCCIONES LLAVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNO_VALOR ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_VALOR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETORNO_VALOR ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Return(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_VALOR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RUN ::= START_WITH ID PAR1 PARAMSLLAMADA PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RUN ::= START_WITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA ::= ID PAR1 PARAMSLLAMADA PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMADA_EXP ::= ID PAR1 PARAMSLLAMADA PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_EXP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAMADA_EXP ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_EXP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMSLLAMADA ::= PARAMSLLAMADA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMSLLAMADA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSLLAMADA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION COMPARACIONIGUALIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION NEGACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION MENORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION MAYORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVariable(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= ID CORCHETEA EXPRESION CORCHETEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= ID CORCHETEA EXPRESION CORCHETEC CORCHETEA EXPRESION CORCHETEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= LLAMADA_EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= ELIMINAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INCREMENTOA ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncrementoDecremento(a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECREMENTOA ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncrementoDecremento(a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTOA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
