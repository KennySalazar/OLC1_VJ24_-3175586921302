package analisis;

// Importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;

// Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVariable;
import instrucciones.Casteo;
import instrucciones.IncrementoDecremento;
import instrucciones.If;
import instrucciones.Match;
import instrucciones.Caso;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;

// Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVariable;

// Parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

// Terminales
terminal String CADENA, ENTERO, DECIMAL, CARACTER, BOOLEANO, ID, INCREMENTO, DECREMENTO;
terminal FINCADENA, PRINTLN, STRING, DOUBLE, INT, VAR, CONST, CHAR, BOOL;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULTIPLICACION, DIVISION, POTENCIA, MODULO;
terminal COMPARACIONIGUALIGUAL, NEGACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
terminal IGUAL, DOSPUNTOS;
terminal OR, AND, XOR, NOT;
terminal LLAVEA, LLAVEC, IF, ELSE;
terminal MATCH, SIGNOCASOMATCH, SIGNODEFAULTMATCH;
terminal FOR, WHILE, DO;
terminal String BREAK, CONTINUE;
terminal CAS;


// No Terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION, INCREMENTOA, DECREMENTOA;
nonterminal Instruccion SIF, SMATCH;
nonterminal Instruccion CFOR, ACTUALIZA_FOR, CWHILE, CDOWHILE, BREAKK, CONTINUEA;
nonterminal LinkedList<Caso> CASOS;
nonterminal Caso CASO, DEFAULTCASO;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;


precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left COMPARACIONIGUALIGUAL, NEGACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence nonassoc POTENCIA;
precedence right UMENOS;
precedence right CAS;


start with INICIO;

INICIO ::= INSTRUCCIONES:a {: RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a    {: RESULT = a; :}
              | DECLARACION:a       {:   RESULT=a;   :}
              | ASIGNACION:a        {:   RESULT=a;   :}
              | DECREMENTOA:a        {:   RESULT=a;   :}
              | INCREMENTOA:a         {:   RESULT=a;   :}
              | EXPRESION: a        {:   RESULT=a;   :}
              | SIF:a               {:   RESULT=a;   :}
              | SMATCH:a               {:   RESULT=a;   :}
              | CFOR:a               {:   RESULT=a;   :}
              | CWHILE:a       {:   RESULT=a;   :}
              | CDOWHILE:a       {:   RESULT=a;   :}
              | BREAKK:a       {:   RESULT=a;   :}
              | CONTINUEA:a       {:   RESULT=a;   :}
              | error FINCADENA
              | error
;

IMPRESION ::= PRINTLN PAR1 EXPRESION:a PAR2 FINCADENA {: RESULT = new Print(a, aleft, aright); :}
;

DECLARACION ::=   VAR ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA {: RESULT = new Declaracion(b, c, a, true, aleft, aright); :}
                | VAR ID:b DOSPUNTOS TIPOS:a FINCADENA {: RESULT = new Declaracion(b, a, true, aleft, aright); :}
                | CONST ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA {: RESULT = new Declaracion(b, c, a, false, aleft, aright); :}
                | CONST ID:b DOSPUNTOS TIPOS:a FINCADENA {: RESULT = new Declaracion(b, a, false, aleft, aright); :}
                
               
;


ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  {:   RESULT = new If(a, b, aleft, aright);   :}
    | IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  ELSE LLAVEA INSTRUCCIONES:c LLAVEC {:   RESULT = new If(a, b, c, aleft, aright);   :}
    | IF PAR1 EXPRESION:a PAR2 LLAVEA INSTRUCCIONES:b LLAVEC  ELSE SIF:c {:   RESULT = new If(a, b, c, aleft, aright);   :}
;

SMATCH ::=
    MATCH EXPRESION:a LLAVEA CASOS:b LLAVEC
        {: RESULT = new Match(a, b, aleft, aright); :}
    | MATCH EXPRESION:a LLAVEA CASOS:b DEFAULTCASO:c LLAVEC
        {: RESULT = new Match(a, b, c, aleft, aright); :}
    | MATCH EXPRESION:a LLAVEA DEFAULTCASO:c LLAVEC
        {: LinkedList<Caso> casos = new LinkedList<>();
           RESULT = new Match(a, casos, c, aleft, aright); :}
    ;

CASOS ::=
    CASOS:a CASO:b
        {: RESULT = a; RESULT.add(b); :}
    | CASO:a
        {: RESULT = new LinkedList<>(); RESULT.add(a); :}
    ;

CASO ::=
    EXPRESION:a SIGNOCASOMATCH LLAVEA INSTRUCCIONES:b LLAVEC
        {: RESULT = new Caso(a, b, false, aleft, aright); :}
    ;

DEFAULTCASO ::=
    SIGNODEFAULTMATCH LLAVEA INSTRUCCIONES:b LLAVEC
        {: RESULT = new Caso(null, b, true, bleft, bright); :}
    ;


CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVEA INSTRUCCIONES:d LLAVEC  {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :} 
                | ID:a INCREMENTO  {: RESULT = new IncrementoDecremento(a, true, aleft, aright); :} 
                | ID:a DECREMENTO  {: RESULT = new IncrementoDecremento(a, false, aleft, aright); :}
                
;

CWHILE ::= WHILE EXPRESION:a  LLAVEA INSTRUCCIONES:b LLAVEC {: RESULT = new While(a,b, aleft, aright); :}

;

CDOWHILE ::=  DO LLAVEA INSTRUCCIONES:a LLAVEC WHILE EXPRESION:b FINCADENA {: RESULT = new DoWhile(b,a,bleft, bright); :}

;

BREAKK ::=  BREAK:a FINCADENA {:RESULT = new Break(aleft, aright); :}

;

CONTINUEA ::= CONTINUE:a FINCADENA {:RESULT = new Continue(aleft, aright); :}

;


TIPOS ::= INT    {: RESULT = new Tipo(tipoDato.ENTERO); :}
        | DOUBLE {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        | STRING {: RESULT = new Tipo(tipoDato.CADENA); :}
        | CHAR {: RESULT = new Tipo(tipoDato.CARACTER); :}
        | BOOL {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
        
;

EXPRESION ::= MENOS EXPRESION:a          {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | PAR1 TIPOS:b PAR2 EXPRESION:a  {: RESULT = new Casteo(a, b, aleft, aright); :} %prec CAS
            | EXPRESION:a MAS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIVISION EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a POTENCIA EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a MODULO EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a COMPARACIONIGUALIGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); :}
            | EXPRESION:a NEGACION EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); :}
            | EXPRESION:a MENORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); :}
            | EXPRESION:a MENORIGUALQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); :}
            | EXPRESION:a MAYORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); :}
            | EXPRESION:a MAYORIGUALQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); :}
            | NOT EXPRESION:a {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            | EXPRESION:a XOR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :}
            | ENTERO:a {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright ); :}
            | DECIMAL:a {: RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright ); :}
            | CADENA:a {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright ); :}
            | CARACTER:a {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright ); :}
            | BOOLEANO:a {: RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright ); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :}
            | ID:a {: RESULT = new AccesoVariable(a, aleft, aright); :}
         
;


INCREMENTOA ::= ID:a INCREMENTO FINCADENA {: RESULT = new IncrementoDecremento(a, true, aleft, aright); :}

;

DECREMENTOA ::=  ID:a DECREMENTO FINCADENA {: RESULT = new IncrementoDecremento(a, false, aleft, aright); :}

;


